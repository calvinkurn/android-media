apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: "$rootProject.projectDir/buildconfig/kotlin/composeCompilerReport.gradle"


kapt {
    correctErrorTypes = true
    useBuildCache = true
}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        vectorDrawables.useSupportLibrary=vectorDrawable.toBoolean()
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        multiDexEnabled (project.hasProperty('coverage'))
    }

    lintOptions {
        checkReleaseBuilds false
        checkDependencies false
        htmlReport true
        warningsAsErrors false
        abortOnError false
    }
    buildTypes {
        debug{
            ext.enableHansel = project.hasProperty('hanselEnableDebug')
            testCoverageEnabled (project.hasProperty('coverage'))
        }
        release {
            ext.enableHansel = !project.hasProperty('hanselDisableRelease')
            minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            proguardFiles 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
        exclude 'META-INF/kotlinx-coroutines-core.kotlin_module'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
        exclude('META-INF/androidx.*.version')
        pickFirst "win32-x86-64/attach_hotspot_windows.dll"
        pickFirst "win32-x86/attach_hotspot_windows.dll"
        exclude 'META-INF/**'
    }
    lintOptions {
        abortOnError false
        xmlReport true
        htmlReport true
    }
}

dependencies {

    implementation platform(rootProject.ext.firebase.bom)
    implementation platform(rootProject.ext.networkDependencies.okhttpBom)
    implementation rootProject.ext.supportLibDependencies.recyclerViewV7
    implementation rootProject.ext.supportLibDependencies.supportV4
    implementation rootProject.ext.supportLibDependencies.appCompactV7
    implementation rootProject.ext.supportLibDependencies.supportV13
    implementation rootProject.ext.supportLibDependencies.design
    implementation rootProject.ext.supportLibDependencies.cardViewV7

    implementation rootProject.ext.supportLibDependencies.kotlinSupport
    // Caused by: com.sun.tools.javac.processing.AnnotationProcessingError: java.lang.IllegalStateException: Unsupported metadata version. Check that your Kotlin version is >= 1.0
    // https://stackoverflow.com/questions/67744002/hilt-unsupported-metadata-version-in-kotlin
    kapt rootProject.ext.supportLibDependencies.kotlinMetaData

    implementation (rootProject.ext.debugToolsDependencies.timber){
        exclude group: 'org.jetbrains', module: 'annotations'
    }

    implementation rootProject.ext.miscDependencies.rxAndroid
    implementation rootProject.ext.miscDependencies.rxJava
    implementation rootProject.ext.miscDependencies.coroutineCore
    implementation rootProject.ext.miscDependencies.coroutineAndroid

    compileOnly rootProject.ext.miscDependencies.javaxAnnotation
    implementation rootProject.ext.miscDependencies.dagger
    kapt rootProject.ext.miscDependencies.daggerCompiler

    implementation rootProject.ext.networkDependencies.retrofit
    implementation rootProject.ext.networkDependencies.converterGson
    implementation rootProject.ext.networkDependencies.adapterRxJava
    implementation rootProject.ext.networkDependencies.okHttp
    implementation rootProject.ext.networkDependencies.loggingInterceptor
    implementation rootProject.ext.miscDependencies.gson

    testImplementation rootProject.ext.testDependencies.mockitorCore
    testImplementation rootProject.ext.testDependencies.junit
    testImplementation rootProject.ext.testDependencies.assertJCore

    androidTestImplementation(rootProject.ext.testDependencies.androidTestRunner) {
        exclude module: 'support-annotations'
    }
    androidTestImplementation(rootProject.ext.testDependencies.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation rootProject.ext.testDependencies.mockitorCore,     { exclude group: 'net.bytebuddy' } // DexMaker has it"s own MockMaker==============================--
    androidTestImplementation rootProject.ext.testDependencies.mockitorAndroid
    androidTestImplementation rootProject.ext.testDependencies.androidRulesVersion

    lintChecks rootProject.ext.tkpdInternalLibDependencies.lint
}
