/**
 * This Gradle script captures data about the OS, IDE, CI, and Git and stores it in build scans via custom tags, custom links, and custom values.
 *
 * Proceed as following to benefit from this script in your Gradle build:
 *
 * - Copy this script to the root folder of your Gradle project, renaming it to 'build-scan-user-data.gradle'
 * - Apply the Gradle Build Scan plugin
 * - Point to your Gradle Enterprise server
 * - Include this script in the root project's build.gradle(.kts) file via `apply from: 'build-scan-user-data.gradle'`
 * - Further customize this script to your needs
 */

setup()
tagOs()
tagIde()
tagCiOrLocal()
addCiMetadata()
enableBuildScanInput()
addGitMetadata()

// Add here other scripts, if needed
//apply from:"${rootProject.projectDir}/<<other-script.gradle>>"


void setup() {
    buildScan.server = "http://172.21.57.32"
    //buildScan.publishAlways()
}

void tagOs() {
    buildScan.tag System.getProperty('os.name')
}

void tagIde() {
    if (project.hasProperty('android.injected.invoked.from.ide')) {
        buildScan.tag 'Android Studio'
    } else if (System.getProperty('idea.version')) {
        buildScan.tag 'IntelliJ IDEA'
    } else if (System.getProperty('eclipse.buildId')) {
        buildScan.tag 'Eclipse'
    } else if (!isCi()) {
        buildScan.tag 'Cmd Line'
    }
}

void tagCiOrLocal() {
    buildScan.tag(isCi() ? 'CI' : 'LOCAL')
}

void addCiMetadata() {
    if (isCi()) {
        if (System.getenv('BUILD_URL')) {
            buildScan.link 'Jenkins build', System.getenv('BUILD_URL')
        }
        if (System.getenv('BUILD_NUMBER')) {
            buildScan.value 'CI build number', System.getenv('BUILD_NUMBER')
        }
        if (System.getenv('NODE_NAME')) {
            def agentName = System.getenv('NODE_NAME') == 'master' ? 'master-node' : System.getenv('NODE_NAME')
            buildScan.tag agentName
            buildScan.value 'CI node name', agentName
        }
        if (System.getenv('JOB_NAME')) {
            def jobNameLabel = 'CI job'
            def jobName = System.getenv('JOB_NAME')
            buildScan.tag jobName
            buildScan.value jobNameLabel, jobName
            addCustomValueSearchLink 'CI job build scans', [(jobNameLabel): jobName]
        }
        if (System.getenv('STAGE_NAME')) {
            def stageNameLabel = 'CI stage'
            def stageName = System.getenv('STAGE_NAME')
            buildScan.value stageNameLabel, stageName
            addCustomValueSearchLink 'CI stage build scans', [(stageNameLabel): stageName]
        }
    }
}

void addGitMetadata() {
    buildScan.background {
        if (!isGitInstalled()) {
            return
        }
        def gitCommitId = execAndGetStdout('git', 'rev-parse', '--short=8', '--verify', 'HEAD')
        def gitBranchName = execAndGetStdout('git', 'rev-parse', '--abbrev-ref', 'HEAD')
        def gitStatus = execAndGetStdout('git', 'status', '--porcelain')

        if (gitCommitId) {
            def commitIdLabel = 'Git commit id'
            value commitIdLabel, gitCommitId
            addCustomValueSearchLink 'Git commit id build scans', [(commitIdLabel): gitCommitId]
            def originUrl = execAndGetStdout('git', 'config', '--get', 'remote.origin.url')
            if (originUrl.contains('github.com')) { // only for GitHub
                def repoPath = (originUrl =~ /(.*)github\.com[\/|:](.*)/)[0][2]
                if (repoPath.endsWith('.git')) {
                    repoPath = repoPath.substring(0, repoPath.length() - 4)
                }
                link 'Github Source', "https://github.com/$repoPath/tree/" + gitCommitId
            }
        }
        if (gitBranchName) {
            value 'Git branch', gitBranchName
        }
        if (gitStatus) {
            value 'Git status', gitStatus
        }
    }
}


static boolean isCi() {
    System.getenv('CI')
}

String execAndGetStdout(String... args) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine(args)
        standardOutput = stdout
    }
    trimAtEnd(stdout.toString())
}

void addCustomValueSearchLink(String title, Map<String, String> search) {
    if (buildScan.server) {
        buildScan.link title, customValueSearchUrl(search)
    }
}

String customValueSearchUrl(Map<String, String> search) {
    def query = search.collect { name, value ->
        "search.names=${encodeURL(name)}&search.values=${encodeURL(value)}"
    }.join('&')
    "${appendIfMissing(buildScan.server, '/')}scans?$query"
}

static String encodeURL(String url) {
    URLEncoder.encode(url, 'UTF-8')
}

static boolean isGitInstalled() {
    try {
        "git --version".execute().waitFor() == 0
    } catch (IOException ignored) {
        false
    }
}

static String appendIfMissing(String str, String suffix) {
    str.endsWith(suffix) ? str : str + suffix
}

static String trimAtEnd(String str) {
    ('x' + str).trim().substring(1)
}

void enableBuildScanInput() {
    buildScan.captureTaskInputFiles = true
}
