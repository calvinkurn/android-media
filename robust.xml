<?xml version="1.0" encoding="utf-8"?>
<resources>

    <switch>
        <!--true means to open Robust, please note that even if this value is true, Robust is only enabled in Release mode by default -->
        <!--false means to turn off Robust, neither Debug nor Release mode will run robust-->
        <turnOnRobust>true</turnOnRobust>
        <!--<turnOnRobust>false</turnOnRobust>-->

        <!--Whether the manual mode is enabled, the manual mode will look for all the classes under the configuration item patchPackname package name, automatically deal with the confusion, and then make all the classes under the patchPackname package name into patches -->
        <!--This switch just makes all the classes under the configuration item patchPackname into a patch, which is suitable for special cases and generally not encountered -->
        <!--<manual>true</manual>-->
        <manual>false</manual>

        <!--Whether to force inserting code, Robust is disabled by default in debug mode, if this option is set to true, code will be inserted under debug-->
        <!--But when the configuration item turnOnRobust is false, this configuration item will not take effect-->
        <!--<forceInsert>true</forceInsert>-->
        <forceInsert>false</forceInsert>

        <!--Whether to capture all exceptions in the patch, it is recommended that the value of this switch be true when going online, and false when testing -->
        <catchReflectException>true</catchReflectException>
        <!--<catchReflectException>false</catchReflectException>-->

        <!--Whether log is added to the patch, it is recommended that the value of this switch be false when online, and true when testing -->
        <!--<patchLog>true</patchLog>-->
        <patchLog>false</patchLog>

        <!--Whether the project supports progaurd-->
        <proguard>true</proguard>
        <!--<proguard>false</proguard>-->

        <!--Whether the project supports ASM for instrumentation, ASM is used by default, ASM is recommended, Javaassist is easy to interfere with other bytecode tools -->
        <useAsm>true</useAsm>
        <!--        <useAsm>false</useAsm>-->

        <!--For Java8-level Lambda expressions, compile them into private-level javac functions. At this time, it is up to the developer to decide whether to perform instrumentation processing-->
        <forceInsertLambda>true</forceInsertLambda>
        <!-- <forceInsertLambda>false</forceInsertLambda>-->
    </switch>

    <!--The package name or class name that needs to be hot-filled, all classes under these package names will be inserted into the code-->
    <!--This configuration item is that each APP needs to configure itself, which is the package name of your own code in your App.
    The classes under these package names will be inserted into the code by Robust, and the class Robust that is not inserted into the code by Robust cannot be repaired -->
    <packname name="hotfixPackage">
        <name>com.tkpd</name>
        <name>com.tokopedia</name>
    </packname>

    <!--The package name of the Robust insertion code is not required, and the Robust library does not need to insert the code. Please keep the following configuration items, and you can also add them according to the situation of each APP -->
    <exceptPackname name="exceptPackage">
        <name>com.tokopedia.stability</name>
        <name>com.tokopedia.abstraction.R</name>
    </exceptPackname>

    <!--The package name of the patch, please keep the same as the patch class name set in the fetchPatchList method in the class PatchManipulateImp ( setPatchesInfoImplClassFullName("com.meituan.robust.patch.PatchesInfoImpl")),
    Each app can be customized independently. What needs to be ensured is that the package name set by setPatchesInfoImplClassFullName is the following configuration item, and the class name must be: PatchesInfoImpl-->
    <patchPackname name="patchPackname">
        <name>com.tokopedia.stability.patch</name>
    </patchPackname>

    <!--In the automated patch, classes that do not need reflection processing, this configuration item is carefully selected-->
    <noNeedReflectClass name="classes no need to reflect">

    </noNeedReflectClass>
</resources>