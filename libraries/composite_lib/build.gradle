// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'buildconfig/dependencies/dependencies.gradle'
apply from: 'tools/quality.gradle'
apply from: 'tools/version/version_module.gradle'

buildscript {
    ext.jacocoVersion = '0.8.2'
    repositories {
        gradlePluginPortal()
        google()
        maven { url "https://maven.google.com" }
        jcenter()
        mavenLocal()
	maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'http://central.maven.org/maven2/' }
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath ('com.android.tools.build:gradle:3.3.1') {
            exclude module: 'proguard-gradle'
        }
        classpath "org.jacoco:org.jacoco.core:$jacocoVersion"
        classpath('net.sf.proguard:proguard-gradle:5.2.1') {
            force = true
        }
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:4.9.0") {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        }
        if (!project.hasProperty("disable-performance-plugin")) {
            classpath('com.google.firebase:firebase-plugins:1.1.1') {
                exclude group: 'com.google.guava', module: 'guava-jdk5'
            }
        }
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.0"
        classpath "com.google.gms:google-services:4.3.0"
        classpath "io.fabric.tools:gradle:1.27.1"
        classpath "com.vanniktech:gradle-code-quality-tools-plugin:0.17.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
    }
}


allprojects {
    project.apply from: rootProject.file('buildconfig/dependencies/dependencies.gradle')
    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven { url "https://maven.google.com" }
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://dl.bintray.com/guardian/android' }
        maven { url 'https://mymavenrepo.com/repo/e01iL1W9Gdxw73PGI9LA' }
        maven {
            url "${artifactory_url}" + "/libs-release-local";
            credentials {
                username = "${artifactory_username}"
                password = "${artifactory_password}"
            }
        }
        maven { url "https://www.jitpack.io" }
        maven { url 'https://hansel.io/maven' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


ext {
    artifactoryUrl = "${artifactory_url}"
}

afterEvaluate {
    tasks.withType(PublishToMavenRepository).all { publishTask ->
        publishTask.onlyIf { task ->
            if (project.plugins.hasPlugin('com.android.application')) {
                task.enabled = false
                task.group = null
                return false
            }
            return true
        }
    }
}


subprojects {
    project.configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('com.squareup.okhttp3:okhttp') with module(rootProject.ext.networkDependencies.okHttp)
                substitute module('org.jetbrains.kotlin:kotlin-stdlib-jre8') with module(rootProject.ext.supportLibDependencies.kotlinSupport)
                substitute module('com.squareup.okio:okio') with module('com.squareup.okio:okio:1.15.0')
                substitute module('com.google.code.findbugs:jsr305') with module('com.google.code.findbugs:jsr305:1.3.9')
                substitute module('androidx.annotation:annotation') with module('androidx.annotation:annotation:1.0.0')
                substitute module('androidx.multidex:multidex') with module('androidx.multidex:multidex:2.0.0')
                substitute module('androidx.legacy:legacy-support-v13') with module('androidx.legacy:legacy-support-v13:1.0.0')
                substitute module('androidx.legacy:legacy-support-v4') with module('androidx.legacy:legacy-support-v4:1.0.0')
                substitute module('androidx.core:core') with module('androidx.core:core:1.0.0')
                substitute module('androidx.arch.core:core-runtime') with module('androidx.arch.core:core-runtime:2.0.0-rc01')
                substitute module('androidx.arch.core:core-common') with module('androidx.arch.core:core-common:2.0.0-rc01')
                substitute module('androidx.lifecycle:lifecycle-runtime') with module('androidx.lifecycle:lifecycle-runtime:2.0.0-rc01')
                substitute module('androidx.lifecycle:lifecycle-viewmodel') with module('androidx.lifecycle:lifecycle-viewmodel:2.0.0-rc01')
                substitute module('androidx.lifecycle:lifecycle-livedata-core') with module('androidx.lifecycle:lifecycle-livedata-core:2.0.0-rc01')
                substitute module('org.apache.commons:commons-lang3') with module('org.apache.commons:commons-lang3:3.5')
                substitute module('com.google.android.gms:play-services-base') with module("com.google.android.gms:play-services-base:${playServiceBaseVersion}")
                substitute module('com.google.firebase:firebase-config') with module("com.google.firebase:firebase-config:${playServiceFirebaseConfig}")
                substitute module('com.google.android.gms:play-services-base') with module("com.google.android.gms:play-services-base:${playServiceBaseVersion}")
                substitute module('com.google.firebase:firebase-iid') with module("com.google.firebase:firebase-iid:${playServiceFirebaseIidVersion}")
                substitute module('com.google.android.gms:play-services-measurement-base') with module("com.google.android.gms:play-services-measurement-base:16.0.5")
            }
        }
    }
}

task projectDependencyGraph {
    doLast {
        def rootProjects = []
        def queue = [rootProject]
        while (!queue.isEmpty()) {
            def project = queue.remove(0)
            rootProjects.add(project)
            queue.addAll(project.childProjects.values())
        }

        def projects = new LinkedHashSet<Project>()

        queue = [rootProject]
        while (!queue.isEmpty()) {
            def project = queue.remove(0)
            queue.addAll(project.childProjects.values())
            project.configurations.all { config ->
                config.dependencies.each { dependency ->
                    projects.add(project)
                    projects.add(dependency)
                    rootProjects.remove(dependency)

                    println " ${project.path} -> ${dependency.group} "
                }
            }
        }
    }
}


gradle.buildFinished {
    "zip -d .okbuck/cache/org.hamcrest.hamcrest-core-1.3.jar LICENSE.txt".execute()
    "zip -d .okbuck/cache/org.hamcrest.hamcrest-library-1.3.jar LICENSE.txt".execute()
    "zip -d .okbuck/cache/org.hamcrest.hamcrest-integration-1.3.jar LICENSE.txt".execute()
}

