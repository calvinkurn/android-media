import com.tokopedia.plugin.ScanReleaseDateTask
import com.tokopedia.plugin.ReadVersionConfigTask
import com.tokopedia.plugin.ScanProjectTask
import com.tokopedia.plugin.ScanProjectTaskNew
import com.tokopedia.plugin.ScanLatestVersionTask
import com.tokopedia.plugin.ScanModuleToPublishTask
import com.tokopedia.plugin.PublishCompositeTask
import com.tokopedia.plugin.PublishCompositeTaskNew
import com.tokopedia.plugin.WriteLatestLogTask
import com.tokopedia.plugin.PrintLatestVersionTask

// -PmoduleLatestVersion=<location of latest Version File Path>
task scanLatestVersion(type: ScanLatestVersionTask){
    doFirst {
        println("[SCAN LATEST VERSION TASK START]")
    }
    doLast{
        println("[SCAN LATEST VERSION TASK FINISHED]")
    }
}

// -PmoduleToPublish=<list Of module To Publish File Path> and
task scanModuleToPublish(type: ScanModuleToPublishTask){
    doFirst {
        println("[SCAN MODULE TO PUBLISH TASK START]")
    }
    doLast{
        println("[SCAN MODULE TO PUBLISH TASK FINISHED]")
    }
}

task scanReleaseDate(type: ScanReleaseDateTask){
    doFirst {
        println("[SCAN RELEASE DATE TASK START]")
    }
    doLast{
        println("[SCAN RELEASE DATE TASK FINISHED]")
    }
}

task readVersionConfigTask(type: ReadVersionConfigTask) {
    doFirst {
        println("[READ VERSION CONFIG TASK START]")
    }
    doLast {
        println("[READ VERSION CONFIG TASK END]")
    }
}

//task scanProjectTask(type: ScanProjectTask) {
//    dependsOn 'scanReleaseDate'
//    dependsOn 'readVersionConfigTask'
//    doFirst {
//            println("[VERSION TASK START]")
//            versionConfigMap = readVersionConfigTask.versionConfigMap
//            versionSuffix = readVersionConfigTask.versionSuffix
//            moduleLatestLogMap = scanReleaseDate.moduleLatestLogMap
//    }
//    doLast {
//        println("[VERSION TASK END]")
//    }
//}

//task writeLatestGitLog(type: WriteLatestLogTask){
//    doFirst {
//        if (!versionDependency.successPublish) {
//            throw new StopExecutionException()
//        }
//        println("[WRITE LATEST GIT LOG START]")
//    }
//    doLast {
//        println("[WRITE LATEST GIT LOG FINISHED]")
//    }
//}

// need parameter
// -PmoduleToPublish=<list Of module To Publish> and
// -PmoduleLatestVersion=<location of latest Version>
//task versionDependency(type: PublishCompositeTask, dependsOn: scanProjectTask){
//    doFirst {
//        println("[PUBLISH COMPOSITE TASK START]")
//        moduleLatestLogMap = scanProjectTask.moduleLatestLogMap
//        dependenciesProjectNameHashSet = scanProjectTask.dependenciesProjectNameHashSet
//        candidateModuleListToUpdate = scanProjectTask.candidateModuleListToUpdate
//        projectToArtifactInfoList = scanProjectTask.projectToArtifactInfoList
//        artifactIdToProjectNameList = scanProjectTask.artifactIdToProjectNameList
//        versionConfigMap = scanProjectTask.versionConfigMap
//        versionSuffix = scanProjectTask.versionSuffix
//    }
//    doLast{
//        println("[PUBLISH COMPOSITE TASK FINISHED]")
//    }
//    finalizedBy writeLatestGitLog
//}

task scanProjectTaskNew(type: ScanProjectTaskNew) {
    dependsOn 'readVersionConfigTask'
    dependsOn 'scanLatestVersion'
    doFirst {
        if (!scanLatestVersion.successScan) {
            throw new StopExecutionException()
        } else {
            println("[VERSION TASK START]")
            versionConfigMap = readVersionConfigTask.versionConfigMap
            versionSuffix = readVersionConfigTask.versionSuffix
            moduleLatestVersionMap = scanLatestVersion.moduleLatestVersionMap
        }
    }
    doLast {
        println("[VERSION TASK END]")
    }
}

task writeLatestVersion(type: PrintLatestVersionTask){
    dependsOn 'scanLatestVersion'
    doFirst {
        if (!versionDependencyNew.successPublish) {
            throw new StopExecutionException()
        }
        println("[WRITE LATEST VERSION START]")
        projectToArtifactInfoList = versionDependencyNew.projectToArtifactInfoList
        artifactIdToProjectNameList = versionDependencyNew.artifactIdToProjectNameList
        successModuleList = versionDependencyNew.successModuleList
        moduleLatestVersionMap = scanLatestVersion.moduleLatestVersionMap

    }
    doLast {
        println("[WRITE LATEST VERSION FINISHED]")
    }
}

// need parameter
// -PmoduleToPublish=<list Of module To Publish> and
// -PmoduleLatestVersion=<location of latest Version>
task versionDependencyNew(type: PublishCompositeTaskNew){
    dependsOn 'scanProjectTaskNew'
    dependsOn 'scanModuleToPublish'
    doFirst {
        if (!scanModuleToPublish.successScan) {
            throw new StopExecutionException()
        } else {
            println("[PUBLISH COMPOSITE TASK START]")
            moduleToPublishList = scanModuleToPublish.moduleToPublishList
            dependenciesProjectNameHashSet = scanProjectTaskNew.dependenciesProjectNameHashSet
            projectToArtifactInfoList = scanProjectTaskNew.projectToArtifactInfoList
            artifactIdToProjectNameList = scanProjectTaskNew.artifactIdToProjectNameList
        }
    }
    doLast{
        println("[PUBLISH COMPOSITE TASK FINISHED]")
    }
    finalizedBy writeLatestVersion
}