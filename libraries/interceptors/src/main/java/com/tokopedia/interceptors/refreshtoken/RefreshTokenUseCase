package com.tokopedia.interceptors.refreshtoken

import com.tokopedia.graphql.coroutines.data.extensions.request
import com.tokopedia.graphql.coroutines.domain.repository.GraphqlRepository
import com.tokopedia.graphql.domain.coroutine.CoroutineUseCase
import kotlinx.coroutines.Dispatchers
import javax.inject.Inject

/**
 * Created by Yoris on 13/10/21.
 */

class RefreshTokenUseCase @Inject constructor(val graphqlRepository: GraphqlRepository)
    : CoroutineUseCase<String, RefreshTokenModel>(Dispatchers.IO) {

    override suspend fun execute(params: String): RefreshTokenModel {
        val mappedParams = createParams(params)
        return graphqlRepository.request(graphqlQuery(), mappedParams)
    }

    private fun createParams(params: String): Map<String, Any> {
        return mapOf(
//            "grant_type" to TokenGenerator().encode("refresh_token"),
//            "refresh_token" to TokenGenerator().encode(params)
        )
    }

    override fun graphqlQuery(): String = """
        mutation refresh_token(${'$'}grant_type: String!, ${'$'}refresh_token: String!){
            login_token(
                input: {
                    grant_type: ${'$'}grant_type
                    refresh_token: ${'$'}refresh_token
                }
            ) {
                acc_sid
                access_token
                expires_in
                refresh_token
                sid
                token_type
                sq_check
                action
                errors {
                    name
                    message
                }
                event_code
            }
        }
    """.trimIndent()
}