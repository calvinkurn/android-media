package com.tokopedia.inappreview

import android.app.Activity
import android.os.Build
import com.google.android.play.core.inappreview.InAppReviewInfo
import com.google.android.play.core.inappreview.InAppReviewManager
import com.google.android.play.core.inappreview.InAppReviewManagerFactory
import com.google.android.play.core.tasks.OnCompleteListener
import com.google.android.play.core.tasks.Task
import com.tokopedia.abstraction.common.utils.LocalCacheHandler
import com.tokopedia.inappreview.CACHE_IN_APP_REVIEW
import com.tokopedia.inappreview.CACHE_KEY_HAS_SHOWN_BEFORE
import com.tokopedia.inappreview.getInAppReviewHasShownBefore
import com.tokopedia.inappreview.setInAppReviewHasShownBefore
import com.tokopedia.remoteconfig.FirebaseRemoteConfigImpl
import com.tokopedia.remoteconfig.RemoteConfig
import com.tokopedia.remoteconfig.RemoteConfigKey


const val CACHE_IN_APP_REVIEW = "CACHE_IN_APP_REVIEW"
const val CACHE_KEY_HAS_SHOWN_BEFORE = "CACHE_KEY_HAS_SHOWN_BEFORE"

@JvmOverloads
fun launchInAppReview(activity: Activity, callback: Callback? = null) : Boolean {
    try {
        val remoteConfig: RemoteConfig = FirebaseRemoteConfigImpl(activity)

        val hasShownInAppReviewBefore: Boolean = getInAppReviewHasShownBefore(activity)
        val enableInAppReview: Boolean = remoteConfig.getBoolean(RemoteConfigKey.ENABLE_IN_APP_REVIEW_DIGITAL_THANKYOU_PAGE, false)

        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M && enableInAppReview && !hasShownInAppReviewBefore) {
            val inAppReviewManager: InAppReviewManager = InAppReviewManagerFactory.create(activity)
            inAppReviewManager.requestInAppReviewFlow().addOnCompleteListener(object : OnCompleteListener<InAppReviewInfo?> {
                override fun onComplete(request: Task<InAppReviewInfo?>) {
                    if (request.isSuccessful()) {
                        inAppReviewManager.launchInAppReviewFlow(activity, request.getResult()).addOnCompleteListener(object : OnCompleteListener<Int?> {
                            override fun onComplete(task: Task<Int?>) {
                                setInAppReviewHasShownBefore(activity)
                                callback?.onCompleted()
                            }
                        })
                    }
                }
            })
            return true
        } else {
            return false
        }
    } catch(e: Exception) {
        return false
    }
}

fun getInAppReviewHasShownBefore(activity: Activity): Boolean {
    val cacheHandler = LocalCacheHandler(activity, CACHE_IN_APP_REVIEW)
    return cacheHandler.getBoolean(CACHE_KEY_HAS_SHOWN_BEFORE)
}

fun setInAppReviewHasShownBefore(activity: Activity) {
    val cacheHandler = LocalCacheHandler(activity, CACHE_IN_APP_REVIEW)
    cacheHandler.putBoolean(CACHE_KEY_HAS_SHOWN_BEFORE, true)
    cacheHandler.applyEditor()
}

interface Callback {
    fun onCompleted()
}