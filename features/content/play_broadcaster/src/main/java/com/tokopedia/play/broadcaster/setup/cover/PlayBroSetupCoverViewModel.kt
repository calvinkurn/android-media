package com.tokopedia.play.broadcaster.setup.cover

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.tokopedia.content.common.ui.model.ContentAccountUiModel
import com.tokopedia.kotlin.extensions.coroutines.launchCatchError
import com.tokopedia.play.broadcaster.data.datastore.PlayBroadcastDataStore
import com.tokopedia.play.broadcaster.data.datastore.PlayBroadcastSetupDataStore
import com.tokopedia.play.broadcaster.domain.model.autogeneratedcover.ImageGeneratorArgs
import com.tokopedia.play.broadcaster.domain.model.autogeneratedcover.ImageGeneratorMapper
import com.tokopedia.play.broadcaster.domain.repository.PlayBroadcastRepository
import com.tokopedia.play.broadcaster.ui.model.PlayCoverUiModel
import com.tokopedia.play.broadcaster.ui.model.campaign.ProductTagSectionUiModel
import com.tokopedia.play.broadcaster.ui.model.setup.AutoGeneratedCoverAnalyticModel
import com.tokopedia.play.broadcaster.ui.model.setup.AutoGeneratedCoverUIModel
import com.tokopedia.play.broadcaster.util.preference.HydraSharedPreferences
import com.tokopedia.play.broadcaster.view.state.CoverSetupState
import com.tokopedia.play.broadcaster.view.state.SetupDataState
import com.tokopedia.user.session.UserSessionInterface
import dagger.assisted.Assisted
import dagger.assisted.AssistedFactory
import dagger.assisted.AssistedInject
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update

class PlayBroSetupCoverViewModel @AssistedInject constructor(
    @Assisted(KEY_CHANNEL_TITLE) val channelTitle: String,
    @Assisted(KEY_CHANNEL_ID) val channelId: String,
    @Assisted(KEY_CONTENT_ACCOUNT) val contentAccount: ContentAccountUiModel,
    @Assisted(KEY_DATA_STORE) val dataStore: PlayBroadcastDataStore,
    @Assisted(KEY_ENTRY_POINT) val entryPoint: String,
    private val sharedPref: HydraSharedPreferences,
    private val repo: PlayBroadcastRepository,
    private val userSession: UserSessionInterface,
) : ViewModel() {

    @AssistedFactory
    interface Factory {
        fun create(
            @Assisted(KEY_CHANNEL_TITLE) channelTitle: String,
            @Assisted(KEY_CHANNEL_ID) channelId: String,
            @Assisted(KEY_CONTENT_ACCOUNT) contentAccount: ContentAccountUiModel,
            @Assisted(KEY_DATA_STORE) dataStore: PlayBroadcastDataStore,
            @Assisted(KEY_ENTRY_POINT) entryPoint: String,
        ): PlayBroSetupCoverViewModel
    }

    val observableCover = getCurrentSetupDataStore().getObservableSelectedCover()
    val observableProduct = getCurrentSetupDataStore().getObservableProductTag()
    private val _autoGeneratedCover = MutableStateFlow<List<AutoGeneratedCoverUIModel>>(emptyList())
    val autoGeneratedCover: StateFlow<List<AutoGeneratedCoverUIModel>>
        get() = _autoGeneratedCover
    val productSectionList: List<ProductTagSectionUiModel>
        get() = getCurrentSetupDataStore().getProductTag()

    private val autoGeneratedCoverList = mutableListOf<AutoGeneratedCoverUIModel>()
    private var selectedAutoGeneratedCoverPosition = -1
    private val autoGeneratedCoverMapper: ImageGeneratorMapper
        get() = ImageGeneratorMapper(productSectionList, contentAccount.iconUrl)
    private val autoGeneratedCoverArgs: ImageGeneratorArgs
        get() = ImageGeneratorArgs(autoGeneratedCoverList[selectedAutoGeneratedCoverPosition].imageUrl)
    var autoGeneratedCoverAnalyticData = AutoGeneratedCoverAnalyticModel()
    private val savedAutoGeneratedCoverPosition: Int
        get() = sharedPref.getSavedSelectedAutoGeneratedCover(contentAccount.id, entryPoint)

    val userAccessToken: String
        get() = userSession.accessToken

    private fun getCurrentSetupDataStore(): PlayBroadcastSetupDataStore {
        return dataStore.getSetupDataStore()
    }

    private val _uiEvent = MutableSharedFlow<PlayBroSetupCoverEvent>(extraBufferCapacity = 100)
    val uiEvent: Flow<PlayBroSetupCoverEvent>
        get() = _uiEvent

    fun submitAction(event: PlayBroSetupCoverAction) {
        when (event) {
            is PlayBroSetupCoverAction.SetUploadImageCover -> handleSetCover(event.cover)
            is PlayBroSetupCoverAction.SetUploadAutoGeneratedCover -> handleSetUploadAutoGeneratedCover()
            is PlayBroSetupCoverAction.SelectAutoGeneratedCover -> handleSelectAutoGeneratedCover(
                event.position
            )
            is PlayBroSetupCoverAction.UnSelectAutoGeneratedCover -> handleUnselectAutoGeneratedCover()
            is PlayBroSetupCoverAction.GetAutoGeneratedImageCoverPreview -> handleGetAutoGeneratedImageCoverPreview()
            is PlayBroSetupCoverAction.CheckButtonState -> checkHasPreselectedAutoGeneratedCover()
            is PlayBroSetupCoverAction.RemoveStateAutoGeneratedCover -> handleRemoveStateAutoGeneratedCover()
        }
    }

    private fun handleSetCover(cover: PlayCoverUiModel) {
        deleteSavedAutoGeneratedCover()
        setSelectedCover(cover)
    }

    private fun handleGetAutoGeneratedImageCoverPreview() {
        viewModelScope.launchCatchError(block = {
            autoGeneratedCoverList.clear()
            autoGeneratedCoverList.addAll(autoGeneratedCoverMapper.getImagePreview())

            _autoGeneratedCover.update {
                autoGeneratedCoverList.mapIndexed { index, autoGeneratedCoverUIModel ->
                    autoGeneratedCoverUIModel.copy(
                        isChecked = index == savedAutoGeneratedCoverPosition,
                        channelAuthor = contentAccount.name,
                        channelTitle = channelTitle,
                    )
                }
            }
        }, onError = {
            _uiEvent.emit(PlayBroSetupCoverEvent.ErrorAutoGeneratedCover(it) {
                handleGetAutoGeneratedImageCoverPreview()
            })
        })
    }

    private fun checkHasPreselectedAutoGeneratedCover() {
        viewModelScope.launchCatchError(block = {
            _uiEvent.emit(
                PlayBroSetupCoverEvent.ButtonSetupCoverEvent(
                    selectedAutoGeneratedCoverPosition >= 0 && savedAutoGeneratedCoverPosition != selectedAutoGeneratedCoverPosition,
                    savedAutoGeneratedCoverPosition >= 0,
                )
            )
        }, onError = {
            _uiEvent.emit(PlayBroSetupCoverEvent.ErrorAutoGeneratedCover(it) {
                checkHasPreselectedAutoGeneratedCover()
            })
        })
    }

    private fun handleSelectAutoGeneratedCover(position: Int) {
        viewModelScope.launchCatchError(block = {
            selectedAutoGeneratedCoverPosition = position
            autoGeneratedCoverAnalyticData = AutoGeneratedCoverAnalyticModel(
                coverId = autoGeneratedCoverArgs.getCoverID(),
                coverPosition = selectedAutoGeneratedCoverPosition,
                coverColor = ImageGeneratorMapper.CoverColor.getByPosition(
                    selectedAutoGeneratedCoverPosition
                ).colorValue
            )
            _autoGeneratedCover.update {
                it.mapIndexed { index, data ->
                    data.copy(isChecked = selectedAutoGeneratedCoverPosition == index)
                }
            }

            checkHasPreselectedAutoGeneratedCover()
        }, onError = {})
    }

    private fun handleUnselectAutoGeneratedCover() {
        viewModelScope.launchCatchError(block = {
            selectedAutoGeneratedCoverPosition = -1
            deleteSavedAutoGeneratedCover()
            autoGeneratedCoverAnalyticData = AutoGeneratedCoverAnalyticModel()
            _autoGeneratedCover.update {
                it.map { data ->
                    data.copy(isChecked = false)
                }
            }

            setSelectedCover(
                cover = PlayCoverUiModel(
                    croppedCover = CoverSetupState.GeneratedCover(
                        coverImage = "",
                    ),
                    state = SetupDataState.Draft,
                )
            )

            uploadSelectedCover()
            checkHasPreselectedAutoGeneratedCover()
        }, onError = {})
    }

    private fun handleSetUploadAutoGeneratedCover() {
        viewModelScope.launchCatchError(block = {
            saveAutoGeneratedCover(selectedAutoGeneratedCoverPosition)
            _uiEvent.emit(PlayBroSetupCoverEvent.SubmitCoverEvent(isLoading = true))
            val request = repo.getGeneratedImageCover(autoGeneratedCoverArgs.getArgs())

            setSelectedCover(
                cover = PlayCoverUiModel(
                    croppedCover = CoverSetupState.GeneratedCover(
                        coverImage = request.imageUrl,
                    ),
                    state = SetupDataState.Draft,
                )
            )
            uploadSelectedCover()
            _uiEvent.emit(
                PlayBroSetupCoverEvent.SubmitCoverEvent(isLoading = false)
            )
        }, onError = {
            _uiEvent.emit(
                PlayBroSetupCoverEvent.SubmitCoverEvent(
                    isLoading = false,
                    throwable = it,
                )
            )
        })
    }

    private fun handleRemoveStateAutoGeneratedCover() {
        selectedAutoGeneratedCoverPosition = -1
    }

    private fun saveAutoGeneratedCover(position: Int) {
        sharedPref.savedSelectedAutoGeneratedCover(position, contentAccount.id, entryPoint)
    }

    private fun deleteSavedAutoGeneratedCover() {
        sharedPref.savedSelectedAutoGeneratedCover(-1, contentAccount.id, entryPoint)
    }

    private fun setSelectedCover(cover: PlayCoverUiModel) {
        getCurrentSetupDataStore().setFullCover(cover)
    }

    private suspend fun uploadSelectedCover() {
        getCurrentSetupDataStore().uploadSelectedCover(contentAccount.id, channelId)
    }

    companion object {
        private const val KEY_CHANNEL_TITLE = "channelTitle"
        private const val KEY_CHANNEL_ID = "channelId"
        private const val KEY_CONTENT_ACCOUNT = "contentAccount"
        private const val KEY_DATA_STORE = "dataStore"
        private const val KEY_ENTRY_POINT = "entryPoint"
    }
}
