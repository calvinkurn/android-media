package com.tokopedia.play.broadcaster.domain.model.autogeneratedcover

import com.tokopedia.play.broadcaster.ui.model.campaign.ProductTagSectionUiModel
import com.tokopedia.play.broadcaster.ui.model.setup.AutoGeneratedCoverUIModel

class ImageGeneratorMapper(
    private val productSectionList: List<ProductTagSectionUiModel>,
    private val authorLogo: String,
) {

    private val productAmount: Int
        get() = getProductImageUrl().size
    private val productUrl1: String
        get() = getProductImageUrl()[0]
    private val productUrl2: String
        get() = getProductImageUrl()[1]

    private fun getProductImageUrl(): List<String> {
        if (productSectionList.isNullOrEmpty()) return emptyList()

        val productUrl = mutableListOf<String>()
        productSectionList.flatMap {
            it.products
        }.take(2)
        return productUrl
    }

    private fun generateImage(backgroundColor: String): String {
        val previewImage = "$HOST_PROD?" +
            "$KEY_BACKGROUND_COLOR=$backgroundColor&" +
            "$KEY_SHOP_LOGO=$authorLogo&" +
            "$KEY_PRODUCT_AMOUNT=$productAmount&" +
            "$KEY_PRODUCT_IMAGE_1=$productUrl1"
        return if (productAmount == MAX_SHOWING_PRODUCT) "$previewImage&$KEY_PRODUCT_IMAGE_2=$productUrl2"
        else previewImage
    }

    fun getImagePreview(): List<AutoGeneratedCoverUIModel> {
        val data = mutableListOf<AutoGeneratedCoverUIModel>()
        CoverColor.values.forEach { backgroundColor ->
            data.add(AutoGeneratedCoverUIModel(imageUrl = generateImage(backgroundColor.colorValue)))
        }
        return data
    }

    companion object {
        private const val MAX_SHOWING_PRODUCT = 2
        private const val KEY_BACKGROUND_COLOR = "background_color"
        private const val KEY_SHOP_LOGO = "shop_logo"
        private const val KEY_PRODUCT_AMOUNT = "product_amount"
        private const val KEY_PRODUCT_IMAGE_1 = "product_image_1"
        private const val KEY_PRODUCT_IMAGE_2 = "product_image_2"
        private const val SOURCE_ID = "LScDrk"
        private const val HOST_PROD = "https://imagenerator.tokopedia.com/v2/preview/$SOURCE_ID"
        private const val HOST_STAGING = "https://imagenerator-staging.tokopedia.com/v2/preview/$SOURCE_ID"
    }

    enum class CoverColor(val colorValue: String) {

        // expected to be hardcoded with this order
        // "blue", "red", "turquoise", "purple", "orange", "green"

        Blue("blue"),
        Red("red"),
        Turquoise("turquoise"),
        Purple("purple"),
        Orange("orange"),
        Green("green");

        companion object {
            val values = values()

            fun getByPosition(position: Int): CoverColor {
                return values[position]
            }
        }
    }

}
