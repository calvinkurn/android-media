package com.tokopedia.play.broadcaster.domain.usecase.imagegenerator

import com.tokopedia.abstraction.common.dispatcher.CoroutineDispatchers
import com.tokopedia.graphql.coroutines.data.extensions.request
import com.tokopedia.graphql.coroutines.domain.repository.GraphqlRepository
import com.tokopedia.graphql.domain.coroutine.CoroutineUseCase
import com.tokopedia.play.broadcaster.domain.model.autogeneratedcover.GetImageGeneratorPolicyResponse
import javax.inject.Inject

class GetImageGeneratorPolicyUseCase @Inject constructor(
    private val graphqlRepository: GraphqlRepository,
    dispatchers: CoroutineDispatchers,
) : CoroutineUseCase<String, GetImageGeneratorPolicyResponse>(dispatchers.io) {

    override suspend fun execute(params: String): GetImageGeneratorPolicyResponse {
        val request = createRequestParams()
        return graphqlRepository.request(graphqlQuery(), request)
    }

    private fun createRequestParams(): Map<String, String> {
        return mapOf(
            PARAMS_SOURCE_ID to VALUE_SOURCE_ID,
        )
    }

    companion object {
        private const val PARAMS_SOURCE_ID = "sourceID"
        private const val VALUE_SOURCE_ID = "LScDrk"
        const val QUERY_NAME = "GetImageGeneratorPolicyUseCaseQuery"
    }

    override fun graphqlQuery(): String {
        return """
            query ImageGeneratorPolicy(${"$${PARAMS_SOURCE_ID}"}: String!) {
              imagenerator_policy($PARAMS_SOURCE_ID: ${"$${PARAMS_SOURCE_ID}"}) {
                args {
                  key
                  type
                  required
                }
              }
            }
        """
    }
}
