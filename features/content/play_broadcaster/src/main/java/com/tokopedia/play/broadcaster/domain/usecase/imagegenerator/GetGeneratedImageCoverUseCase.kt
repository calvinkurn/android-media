package com.tokopedia.play.broadcaster.domain.usecase.imagegenerator

import com.tokopedia.abstraction.common.dispatcher.CoroutineDispatchers
import com.tokopedia.graphql.coroutines.data.extensions.request
import com.tokopedia.graphql.coroutines.domain.repository.GraphqlRepository
import com.tokopedia.graphql.domain.coroutine.CoroutineUseCase
import com.tokopedia.play.broadcaster.domain.model.autogeneratedcover.GetGeneratedImageCoverResponse
import javax.inject.Inject

class GetGeneratedImageCoverUseCase @Inject constructor(
    private val graphqlRepository: GraphqlRepository,
    dispatcher: CoroutineDispatchers
) : CoroutineUseCase<List<Map<String, String>>, GetGeneratedImageCoverResponse>(dispatcher.io) {

    override suspend fun execute(args: List<Map<String, String>>): GetGeneratedImageCoverResponse {
        val params = createRequestParams(args)
        return graphqlRepository.request(graphqlQuery(), params)
    }

    private fun createRequestParams(args: List<Map<String, String>>): Map<String, Any> {
        return mapOf(
            PARAMS_SOURCE_ID to VALUE_SOURCE_ID,
            PARAMS_ARGS to args,
        )
    }

    companion object {
        private const val PARAMS_SOURCE_ID = "sourceID"
        private const val PARAMS_ARGS = "args"
        private const val VALUE_SOURCE_ID = "LScDrk"
        const val QUERY_NAME = "GetImageGeneratorGenerateImageQuery"
    }

    override fun graphqlQuery(): String {
        return """
            mutation ImageGeneratorGenerateImage(
            ${"$${PARAMS_SOURCE_ID}"}: String!,
            ${"$${PARAMS_ARGS}"}: [ImageneratorGenerateImageArg]
            ) {
              imagenerator_generate_image(
              $PARAMS_SOURCE_ID: ${"$${PARAMS_SOURCE_ID}"},
              $PARAMS_ARGS: ${"$${PARAMS_ARGS}"}
              ) {
                image_url
                source_id
              }
            }
        """
    }
}
