package com.tokopedia.play.broadcaster.domain.usecase.imagegenerator

import com.tokopedia.gql_query_annotation.GqlQuery
import com.tokopedia.graphql.coroutines.domain.interactor.GraphqlUseCase
import com.tokopedia.graphql.coroutines.domain.repository.GraphqlRepository
import com.tokopedia.graphql.data.model.CacheType
import com.tokopedia.graphql.data.model.GraphqlCacheStrategy
import com.tokopedia.play.broadcaster.domain.model.autogeneratedcover.GetGeneratedImageCoverResponse
import com.tokopedia.play.broadcaster.domain.usecase.imagegenerator.GetGeneratedImageCoverUseCase.Companion.QUERY_GET_IMAGE_GENERATOR_GENERATE_IMAGE
import com.tokopedia.play.broadcaster.domain.usecase.imagegenerator.GetGeneratedImageCoverUseCase.Companion.QUERY_NAME
import javax.inject.Inject

@GqlQuery(QUERY_NAME, QUERY_GET_IMAGE_GENERATOR_GENERATE_IMAGE)
class GetGeneratedImageCoverUseCase @Inject constructor(
    graphqlRepository: GraphqlRepository
) : GraphqlUseCase<GetGeneratedImageCoverResponse>(graphqlRepository) {

    init {
        setGraphqlQuery(GetImageGeneratorGenerateImageQuery())
        setCacheStrategy(GraphqlCacheStrategy.Builder(CacheType.ALWAYS_CLOUD).build())
        setTypeClass(GetGeneratedImageCoverResponse::class.java)
    }

    suspend fun execute(args: List<Map<String, String>>): GetGeneratedImageCoverResponse {
        this.createRequestParams(args = args)
        return executeOnBackground()
    }

    private fun createRequestParams(
        sourceId: String = VALUE_SOURCE_ID,
        args: List<Map<String, String>>
    ) {
        val request = mapOf(
            PARAMS_SOURCE_ID to sourceId,
            PARAMS_ARGS to args,
        )
        setRequestParams(request)
    }

    companion object {
        private const val PARAMS_SOURCE_ID = "sourceID"
        private const val PARAMS_ARGS = "args"
        private const val VALUE_SOURCE_ID = "LScDrk"
        const val QUERY_NAME = "GetImageGeneratorGenerateImageQuery"
        const val QUERY_GET_IMAGE_GENERATOR_GENERATE_IMAGE = """
            mutation ImageGeneratorGenerateImage(
            ${"$${PARAMS_SOURCE_ID}"}: String!,
            ${"$${PARAMS_ARGS}"}: [ImageneratorGenerateImageArg]
            ) {
              imagenerator_generate_image(
              $PARAMS_SOURCE_ID: ${"$${PARAMS_SOURCE_ID}"},
              $PARAMS_ARGS: ${"$${PARAMS_ARGS}"}
              ) {
                image_url
                source_id
              }
            }
        """
    }
}
