package com.tokopedia.play.broadcaster.view.fragment.setup.cover

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.FragmentManager
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.lifecycleScope
import com.tokopedia.play.broadcaster.databinding.FragmentSetupCoverChooseTemplateBinding
import com.tokopedia.play.broadcaster.ui.model.campaign.ProductTagSectionUiModel
import com.tokopedia.play.broadcaster.view.fragment.base.PlayBaseBroadcastFragment
import com.tokopedia.play.broadcaster.view.viewmodel.PlayBroadcastViewModel
import com.tokopedia.play.broadcaster.view.viewmodel.factory.PlayBroadcastViewModelFactory
import com.tokopedia.play_common.util.extension.withCache
import kotlinx.coroutines.flow.collectLatest
import javax.inject.Inject

/**
 * Created by fachrizalmrsln on 11/01/23
 */
class PlayBroadcastSetupAutoGeneratedCoverFragment @Inject constructor(
    private val parentViewModelFactoryCreator: PlayBroadcastViewModelFactory.Creator
) : PlayBaseBroadcastFragment() {

    private var _binding: FragmentSetupCoverChooseTemplateBinding? = null
    private val binding: FragmentSetupCoverChooseTemplateBinding
        get() = _binding!!

    private val parentViewModel by activityViewModels<PlayBroadcastViewModel> {
        parentViewModelFactoryCreator.create(requireActivity())
    }

    override fun getScreenName(): String {
        return TAG
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentSetupCoverChooseTemplateBinding.inflate(
            LayoutInflater.from(requireContext())
        )
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        observeUiState()
    }

    private fun observeUiState() {
        viewLifecycleOwner.lifecycleScope.launchWhenStarted {
            parentViewModel.uiState.withCache().collectLatest { (prevState, state) ->
                renderProductMenu(prevState?.selectedProduct, state.selectedProduct)
            }
        }
    }

    private fun renderProductMenu(
        prev: List<ProductTagSectionUiModel>?,
        value: List<ProductTagSectionUiModel>
    ) {
        if (prev == value) return
        showTemplate(value.isNotEmpty())
    }

    private fun showTemplate(showTemplate: Boolean) {
        binding.clEmptyProduct.showWithCondition(!showTemplate)
        binding.clChooseTemplateContainer.showWithCondition(showTemplate)
    }

    companion object {
        const val TAG = "PlayBroadcastSetupAutoGeneratedCoverFragment"

        fun getFragment(
            fragmentManager: FragmentManager,
            classLoader: ClassLoader,
        ): PlayBroadcastSetupAutoGeneratedCoverFragment {
            val oldInstance =
                fragmentManager.findFragmentByTag(TAG) as? PlayBroadcastSetupAutoGeneratedCoverFragment
            return oldInstance ?: fragmentManager.fragmentFactory.instantiate(
                classLoader,
                PlayBroadcastSetupAutoGeneratedCoverFragment::class.java.name
            ) as PlayBroadcastSetupAutoGeneratedCoverFragment
        }
    }

}
