package com.tokopedia.play.broadcaster.view.fragment.setup.cover

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.FragmentManager
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.LinearLayoutManager.HORIZONTAL
import androidx.recyclerview.widget.PagerSnapHelper
import androidx.recyclerview.widget.RecyclerView
import com.tokopedia.content.common.ui.itemdecoration.AutoGeneratedCoverItemDecoration
import com.tokopedia.kotlin.extensions.view.showWithCondition
import com.tokopedia.play.broadcaster.databinding.FragmentSetupCoverChooseTemplateBinding
import com.tokopedia.play.broadcaster.ui.model.campaign.ProductTagSectionUiModel
import com.tokopedia.play.broadcaster.ui.model.setup.AutoGeneratedCoverIUIModel
import com.tokopedia.play.broadcaster.view.adapter.PlayAutoGeneratedCoverAdapter
import com.tokopedia.play.broadcaster.view.fragment.base.PlayBaseBroadcastFragment
import com.tokopedia.play.broadcaster.view.viewmodel.PlayBroadcastViewModel
import com.tokopedia.play.broadcaster.view.viewmodel.factory.PlayBroadcastViewModelFactory
import com.tokopedia.play_common.util.extension.withCache
import kotlinx.coroutines.flow.collectLatest
import javax.inject.Inject

/**
 * Created by fachrizalmrsln on 11/01/23
 */
class PlayBroadcastSetupAutoGeneratedCoverFragment @Inject constructor(
    private val parentViewModelFactoryCreator: PlayBroadcastViewModelFactory.Creator
) : PlayBaseBroadcastFragment(), PlayAutoGeneratedCoverAdapter.Listener {

    private var _binding: FragmentSetupCoverChooseTemplateBinding? = null
    private val binding: FragmentSetupCoverChooseTemplateBinding
        get() = _binding!!

    private val parentViewModel by activityViewModels<PlayBroadcastViewModel> {
        parentViewModelFactoryCreator.create(requireActivity())
    }

    private val mLayoutManager = LinearLayoutManager(context, HORIZONTAL, false)

    private lateinit var mAdapter: PlayAutoGeneratedCoverAdapter
    private val snapHelper = PagerSnapHelper()

    override fun getScreenName(): String {
        return TAG
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentSetupCoverChooseTemplateBinding.inflate(
            LayoutInflater.from(requireContext())
        )
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        setupViews()
        observeUiState()
        parentViewModel.mockGeneratedCover()
    }

    private fun observeUiState() {
        viewLifecycleOwner.lifecycleScope.launchWhenStarted {
            parentViewModel.uiState.withCache().collectLatest { (prevState, state) ->
                renderProductMenu(prevState?.selectedProduct, state.selectedProduct)
                renderAutoGeneratedCover(prevState?.autoGeneratedCover, state.autoGeneratedCover)
            }
        }
    }

    private fun renderProductMenu(
        prev: List<ProductTagSectionUiModel>?,
        value: List<ProductTagSectionUiModel>
    ) {
        if (prev == value) return
        showTemplate(value.isNotEmpty())
    }

    private fun showTemplate(showTemplate: Boolean) {
        binding.clEmptyProduct.showWithCondition(!showTemplate)
        binding.clChooseTemplateContainer.showWithCondition(showTemplate)
    }

    private fun setupViews() = with(binding) {
        mAdapter = PlayAutoGeneratedCoverAdapter(this@PlayBroadcastSetupAutoGeneratedCoverFragment)
        rvCoverTemplate.apply {
            adapter = mAdapter
            layoutManager = mLayoutManager
            if (itemDecorationCount == 0) addItemDecoration(AutoGeneratedCoverItemDecoration(context))
            addOnScrollListener(object : RecyclerView.OnScrollListener() {
                override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
                    super.onScrolled(recyclerView, dx, dy)
                    val snappedView = snapHelper.findSnapView(mLayoutManager) ?: return

                    val position = mLayoutManager.getPosition(snappedView)
                    binding.pcCoverTemplate.setCurrentIndicator(position)
                }
            })
        }
    }

    private fun renderAutoGeneratedCover(
        prev: List<AutoGeneratedCoverIUIModel>?,
        value: List<AutoGeneratedCoverIUIModel>
    ) {
        if (prev == value) return
        val data = value.map {
            PlayAutoGeneratedCoverAdapter.Model.PlayAutoGeneratedCoverModel(it)
        }

        if (binding.rvCoverTemplate.isComputingLayout.not()) mAdapter.setItemsAndAnimateChanges(data)

        if (prev?.size == value.size) return
        binding.pcCoverTemplate.setIndicator(data.size)
    }

    override fun onClickItem(data: AutoGeneratedCoverIUIModel, position: Int) {
        parentViewModel.updateMockGeneratedCover(position)
        scrollItemToCenter(position)
        //TODO handle cover data
    }

    private fun scrollItemToCenter(position: Int) {
        val rv = binding.rvCoverTemplate
        val itemView = rv.findViewHolderForAdapterPosition(position)?.itemView
        if (itemView == null) {
            mLayoutManager.scrollToPosition(position)
            return
        }
        val centerOfScreen = rv.width.div(2) - itemView.width.div(2)
        mLayoutManager.scrollToPositionWithOffset(position, centerOfScreen)
    }

    companion object {
        const val TAG = "PlayBroadcastSetupAutoGeneratedCoverFragment"

        fun getFragment(
            fragmentManager: FragmentManager,
            classLoader: ClassLoader,
        ): PlayBroadcastSetupAutoGeneratedCoverFragment {
            val oldInstance =
                fragmentManager.findFragmentByTag(TAG) as? PlayBroadcastSetupAutoGeneratedCoverFragment
            return oldInstance ?: fragmentManager.fragmentFactory.instantiate(
                classLoader,
                PlayBroadcastSetupAutoGeneratedCoverFragment::class.java.name
            ) as PlayBroadcastSetupAutoGeneratedCoverFragment
        }
    }

}
