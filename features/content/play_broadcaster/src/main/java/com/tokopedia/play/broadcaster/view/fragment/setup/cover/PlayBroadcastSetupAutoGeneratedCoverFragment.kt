package com.tokopedia.play.broadcaster.view.fragment.setup.cover

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.core.view.isVisible
import androidx.fragment.app.FragmentManager
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.LinearLayoutManager.HORIZONTAL
import androidx.recyclerview.widget.PagerSnapHelper
import androidx.recyclerview.widget.RecyclerView
import com.tokopedia.content.common.ui.itemdecoration.AutoGeneratedCoverItemDecoration
import com.tokopedia.kotlin.extensions.view.showToast
import com.tokopedia.kotlin.extensions.view.showWithCondition
import com.tokopedia.play.broadcaster.R
import com.tokopedia.play.broadcaster.analytic.PlayBroadcastAnalytic
import com.tokopedia.play.broadcaster.databinding.FragmentSetupCoverChooseTemplateBinding
import com.tokopedia.play.broadcaster.ui.action.PlayBroadcastAction
import com.tokopedia.play.broadcaster.ui.event.PlayBroadcastEvent
import com.tokopedia.play.broadcaster.ui.model.campaign.ProductTagSectionUiModel
import com.tokopedia.play.broadcaster.ui.model.setup.AutoGeneratedCoverUIModel
import com.tokopedia.play.broadcaster.view.adapter.PlayAutoGeneratedCoverAdapter
import com.tokopedia.play.broadcaster.view.bottomsheet.PlayBroadcastSetupCoverBottomSheet
import com.tokopedia.play.broadcaster.view.bottomsheet.PlayBroadcastSetupCoverBottomSheet.Companion.TAB_AUTO_GENERATED
import com.tokopedia.play.broadcaster.view.fragment.base.PlayBaseBroadcastFragment
import com.tokopedia.play.broadcaster.view.viewmodel.PlayBroadcastViewModel
import com.tokopedia.play.broadcaster.view.viewmodel.factory.PlayBroadcastViewModelFactory
import com.tokopedia.play_common.lifecycle.viewLifecycleBound
import com.tokopedia.play_common.util.PlayToaster
import com.tokopedia.play_common.util.extension.withCache
import com.tokopedia.unifycomponents.Toaster
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import javax.inject.Inject

/**
 * Created by fachrizalmrsln on 11/01/23
 */
class PlayBroadcastSetupAutoGeneratedCoverFragment @Inject constructor(
    private val parentViewModelFactoryCreator: PlayBroadcastViewModelFactory.Creator,
    private val analytic: PlayBroadcastAnalytic,
) : PlayBaseBroadcastFragment(), PlayAutoGeneratedCoverAdapter.Listener {

    private var _binding: FragmentSetupCoverChooseTemplateBinding? = null
    private val binding: FragmentSetupCoverChooseTemplateBinding
        get() = _binding!!

    private val parentViewModel by activityViewModels<PlayBroadcastViewModel> {
        parentViewModelFactoryCreator.create(requireActivity())
    }

    private val toaster by viewLifecycleBound(
        creator = { PlayToaster(binding.toasterLayout, it.viewLifecycleOwner) }
    )

    private val mLayoutManager by lazy(LazyThreadSafetyMode.NONE) {
        LinearLayoutManager(context, HORIZONTAL, false)
    }

    private val job = SupervisorJob()
    private val scope = CoroutineScope(Dispatchers.Main + job)

    private var isFailed = false

    private val scrollListener by lazy(LazyThreadSafetyMode.NONE) {
        object : RecyclerView.OnScrollListener() {
            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
                super.onScrolled(recyclerView, dx, dy)
                val snappedView = snapHelper.findSnapView(mLayoutManager) ?: return

                val position = mLayoutManager.getPosition(snappedView)
                binding.pcCoverTemplate.setCurrentIndicator(position)
            }
        }
    }

    private lateinit var mAdapter: PlayAutoGeneratedCoverAdapter
    private val snapHelper = PagerSnapHelper()

    private var mListener: PlayBroadcastSetupCoverBottomSheet.Listener? = null
    private var mEntryPoint = ""

    override fun getScreenName(): String {
        return TAG
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentSetupCoverChooseTemplateBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        setupViews()
        observeUIState()
        observeUIEvent()
    }

    override fun onResume() {
        super.onResume()
        parentViewModel.submitAction(PlayBroadcastAction.CheckButtonState)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        parentViewModel.submitAction(PlayBroadcastAction.RemoveStateAutoGeneratedCover)
        binding.rvCoverTemplate.removeOnScrollListener(scrollListener)
        _binding = null
        mListener = null
    }

    private fun observeUIState() {
        viewLifecycleOwner.lifecycleScope.launchWhenCreated {
            parentViewModel.uiState.withCache().collectLatest { (prevState, state) ->
                renderProductMenu(prevState?.selectedProduct, state.selectedProduct)
                renderAutoGeneratedCover(prevState?.autoGeneratedCover, state.autoGeneratedCover)
            }
        }
    }

    private fun observeUIEvent() {
        viewLifecycleOwner.lifecycleScope.launchWhenCreated {
            parentViewModel.uiEvent.collect { event ->
                when (event) {
                    is PlayBroadcastEvent.SubmitCoverLoading -> {
                        binding.btnSetupCoverChooseTemplateSave.isLoading = event.isLoading
                        if (!event.isLoading && event.throwable == null) {
                            mListener?.dismissSetupCover(TAB_AUTO_GENERATED)
                            return@collect
                        } else if (!event.isLoading && event.throwable != null) {
                            showToast(event.throwable.message)
                        }
                    }
                    is PlayBroadcastEvent.ButtonState -> {
                        binding.btnSetupCoverChooseTemplateDelete.showWithCondition(
                            event.showDelete
                        )
                        binding.btnSetupCoverChooseTemplateSave.isEnabled = event.isEnabled
                    }
                    is PlayBroadcastEvent.ErrorGetAutoGeneratedCover -> {
                        toaster.showError(
                            event.throwable,
                            duration = Toaster.LENGTH_INDEFINITE,
                            actionLabel = getString(R.string.play_broadcast_try_again),
                            actionListener = {
                                analytic.clickTryAgainTemplateCoverBottomSheet(mEntryPoint)
                                event.onRetry?.invoke()
                            }
                        )
                    }
                    else -> {}
                }
            }
        }
    }

    private fun renderProductMenu(
        prev: List<ProductTagSectionUiModel>?,
        value: List<ProductTagSectionUiModel>
    ) {
        if (prev == value) return

        showTemplate(value.isNotEmpty())

        if (value.isNotEmpty()) {
            parentViewModel.submitAction(PlayBroadcastAction.GetAutoGeneratedImageCoverPreview)
        }
    }

    private fun showTemplate(showTemplate: Boolean) {
        binding.clEmptyProduct.showWithCondition(!showTemplate)
        binding.clChooseTemplateContainer.showWithCondition(showTemplate)
    }

    private fun setupViews() = with(binding) {
        mAdapter = PlayAutoGeneratedCoverAdapter(parentViewModel.userAccessToken, this@PlayBroadcastSetupAutoGeneratedCoverFragment)
        rvCoverTemplate.apply {
            adapter = mAdapter
            layoutManager = mLayoutManager
            if (itemDecorationCount == 0) addItemDecoration(AutoGeneratedCoverItemDecoration(context))
            addOnScrollListener(scrollListener)
        }
        snapHelper.attachToRecyclerView(rvCoverTemplate)

        btnEmptyProduct.setOnClickListener {
            analytic.clickTemplateCoverAddProduct(mEntryPoint)
            mListener?.setupCoverProductClicked()
        }
        btnSetupCoverChooseTemplateSave.setOnClickListener {
            if (btnSetupCoverChooseTemplateDelete.isVisible) {
                analytic.clickSaveGeneratedCoverOption(parentViewModel.autoGeneratedCoverAnalyticData, mEntryPoint)
            } else {
                analytic.clickSaveGeneratedCover(parentViewModel.autoGeneratedCoverAnalyticData, mEntryPoint)
            }
            parentViewModel.submitAction(PlayBroadcastAction.SaveSelectedImageCover)
        }
        btnSetupCoverChooseTemplateDelete.setOnClickListener {
            showToast(R.string.play_setup_cover_auto_generated_cover_delete_cover_message)
            analytic.clickDeleteGeneratedCover(parentViewModel.autoGeneratedCoverAnalyticData, mEntryPoint)
            parentViewModel.submitAction(PlayBroadcastAction.UnSelectAutoGeneratedCover)
        }
    }

    private fun renderAutoGeneratedCover(
        prev: List<AutoGeneratedCoverUIModel>?,
        value: List<AutoGeneratedCoverUIModel>
    ) {
        if (prev == value) return

        if (binding.rvCoverTemplate.isComputingLayout.not()) mAdapter.setItemsAndAnimateChanges(value)

        if (prev?.size == value.size) return
        binding.pcCoverTemplate.setIndicator(value.size)
    }

    override fun onClickItem(data: AutoGeneratedCoverUIModel, position: Int) {
        parentViewModel.submitAction(PlayBroadcastAction.SelectAutoGeneratedCover(data, position))
        analytic.clickSelectGeneratedCover(parentViewModel.autoGeneratedCoverAnalyticData, mEntryPoint)
        scrollItemToCenter(position)
    }

    override fun onFailLoadResources(exception: Exception?) {
        if (exception == null) return
        scope.launch {
            delay(TOASTER_DELAY)
            if (!isFailed) {
                isFailed = true

                analytic.clickTryAgainTemplateCoverBottomSheet(mEntryPoint)
                toaster.showError(
                    exception,
                    duration = Toaster.LENGTH_INDEFINITE,
                    actionLabel = getString(R.string.play_broadcast_try_again),
                    actionListener = {
                        isFailed = false
                        mAdapter.notifyDataSetChanged()
                    },
                    customErrMessage = getString(R.string.play_setup_cover_auto_generated_cover_error_load_message),
                )
            }
        }
    }

    private fun scrollItemToCenter(position: Int) {
        val rv = binding.rvCoverTemplate
        val itemView = rv.findViewHolderForAdapterPosition(position)?.itemView
        if (itemView == null) {
            mLayoutManager.scrollToPosition(position)
            return
        }
        val centerOfScreen = rv.width.div(HALF_DIVED) - itemView.width.div(HALF_DIVED)
        mLayoutManager.scrollToPositionWithOffset(position, centerOfScreen)
    }

    fun setupListener(listener: PlayBroadcastSetupCoverBottomSheet.Listener?, entryPoint: String) {
        mListener = listener
        mEntryPoint = entryPoint
    }

    companion object {
        const val TAG = "PlayBroadcastSetupAutoGeneratedCoverFragment"
        private const val HALF_DIVED = 2
        private const val TOASTER_DELAY = 500L

        fun getFragment(
            fragmentManager: FragmentManager,
            classLoader: ClassLoader
        ): PlayBroadcastSetupAutoGeneratedCoverFragment {
            val oldInstance =
                fragmentManager.findFragmentByTag(TAG) as? PlayBroadcastSetupAutoGeneratedCoverFragment
            return oldInstance ?: fragmentManager.fragmentFactory.instantiate(
                classLoader,
                PlayBroadcastSetupAutoGeneratedCoverFragment::class.java.name
            ) as PlayBroadcastSetupAutoGeneratedCoverFragment
        }
    }
}
