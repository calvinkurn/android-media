package com.tokopedia.play.broadcaster.shorts.viewmodel.preparation

import com.tokopedia.play.broadcaster.data.datastore.PlayBroadcastDataStore
import com.tokopedia.play.broadcaster.model.setup.product.ProductSetupUiModelBuilder
import com.tokopedia.play.broadcaster.shorts.robot.PlayShortsViewModelRobot
import com.tokopedia.play.broadcaster.shorts.ui.model.action.PlayShortsAction
import com.tokopedia.play.broadcaster.shorts.ui.model.event.PlayShortsUiEvent
import com.tokopedia.content.product.picker.model.campaign.ProductTagSectionUiModel
import com.tokopedia.play.broadcaster.util.assertEqualTo
import com.tokopedia.play.broadcaster.util.preference.HydraSharedPreferences
import com.tokopedia.unit.test.rule.CoroutineTestRule
import io.mockk.coEvery
import io.mockk.mockk
import io.mockk.verify
import org.junit.Rule
import org.junit.Test

/**
 * Created By : Jonathan Darwin on December 06, 2022
 */
class PlayShortsProductViewModelTest {

    private val mockDataStore: PlayBroadcastDataStore = mockk(relaxed = true)
    private val mockSharedPref: HydraSharedPreferences = mockk(relaxed = true)

    private val productModelBuilder = ProductSetupUiModelBuilder()

    private val mockProducts = productModelBuilder.buildProductTagSectionList()
    private val mockProductsAdded = productModelBuilder.buildProductTagSectionList(sectionSize = 6)
    private val mockEmptyProducts = listOf<ProductTagSectionUiModel>()

    @get:Rule
    val rule: CoroutineTestRule = CoroutineTestRule()

    @Test
    fun playShorts_preparation_product_setProduct() {
        val robot = PlayShortsViewModelRobot(
            dataStore = mockDataStore
        )

        robot.use {
            val state = it.recordState {
                submitAction(PlayShortsAction.SetProduct(mockProducts))
            }

            state.productSectionList.assertEqualTo(mockProducts)
            it.productSectionList.assertEqualTo(mockProducts)
            verify { mockDataStore.getSetupDataStore().setProductTag(mockProducts) }
        }
    }

    @Test
    fun playShorts_preparation_product_setProductAfterSelectGeneratedCover_shouldEmitEventAutoGeneratedCoverToaster() {

        coEvery { mockSharedPref.getSavedSelectedAutoGeneratedCover(any(), any()) } returns 1

        val robot = PlayShortsViewModelRobot(
            dataStore = mockDataStore,
            sharedPref = mockSharedPref,
        )

        robot.use {
            val (state, events) = it.recordStateAndEvent {
                submitAction(PlayShortsAction.SetProduct(mockProducts))
                submitAction(PlayShortsAction.SetProduct(mockProductsAdded))
            }

            state.productSectionList.assertEqualTo(mockProductsAdded)
            it.productSectionList.assertEqualTo(mockProductsAdded)
            verify { mockDataStore.getSetupDataStore().setProductTag(mockProductsAdded) }
            events.last().assertEqualTo(PlayShortsUiEvent.AutoGeneratedCoverToaster(isToasterUpdate = true))
        }
    }

    @Test
    fun playShorts_preparation_product_removeAllProductAfterSelectGeneratedCover_shouldEmitEventAutoGeneratedCoverToaster() {

        coEvery { mockSharedPref.getSavedSelectedAutoGeneratedCover(any(), any()) } returns 1

        val robot = PlayShortsViewModelRobot(
            dataStore = mockDataStore,
            sharedPref = mockSharedPref,
        )

        robot.use {
            val (state, events) = it.recordStateAndEvent {
                submitAction(PlayShortsAction.SetProduct(mockProducts))
                submitAction(PlayShortsAction.SetProduct(mockEmptyProducts))
            }

            state.productSectionList.assertEqualTo(mockEmptyProducts)
            it.productSectionList.assertEqualTo(mockEmptyProducts)
            verify { mockDataStore.getSetupDataStore().setProductTag(mockEmptyProducts) }
            events.last()
                .assertEqualTo(PlayShortsUiEvent.AutoGeneratedCoverToaster(isToasterUpdate = false))
        }
    }
}
