package com.tokopedia.play.broadcaster.viewmodel.setup.cover

import com.tokopedia.content.common.ui.model.ContentAccountUiModel
import com.tokopedia.play.broadcaster.data.datastore.PlayBroadcastDataStore
import com.tokopedia.play.broadcaster.domain.repository.PlayBroadcastRepository
import com.tokopedia.play.broadcaster.setup.cover.PlayBroSetupCoverAction
import com.tokopedia.play.broadcaster.setup.cover.PlayBroSetupCoverEvent
import com.tokopedia.play.broadcaster.setup.cover.PlayBroSetupCoverViewModel
import com.tokopedia.play.broadcaster.ui.model.PlayCoverUiModel
import com.tokopedia.play.broadcaster.ui.model.setup.AutoGeneratedCoverUIModel
import com.tokopedia.play.broadcaster.util.preference.HydraSharedPreferences
import com.tokopedia.unit.test.dispatcher.CoroutineTestDispatchers
import com.tokopedia.user.session.UserSessionInterface
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.cancel
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.launch
import kotlinx.coroutines.test.runBlockingTest

class PlayBroSetupCoverViewModelRobot(
    private val dispatchers: CoroutineTestDispatchers = CoroutineTestDispatchers,
    channelTitle: String,
    channelId: String,
    contentAccount: ContentAccountUiModel,
    dataStore: PlayBroadcastDataStore,
    entryPoint: String,
    sharedPref: HydraSharedPreferences,
    repo: PlayBroadcastRepository,
    userSession: UserSessionInterface,
) {

    private val viewModel = PlayBroSetupCoverViewModel(
        channelTitle = channelTitle,
        channelId = channelId,
        contentAccount = contentAccount,
        dataStore = dataStore,
        entryPoint = entryPoint,
        sharedPref = sharedPref,
        repo = repo,
        userSession = userSession,
    )

    val observableCoverTest = viewModel.observableCover

    fun getAutoGeneratedCover(fn: suspend PlayBroSetupCoverViewModelRobot.() -> Unit): List<AutoGeneratedCoverUIModel> {
        val scope = CoroutineScope(dispatchers.coroutineDispatcher)
        var uiState = listOf<AutoGeneratedCoverUIModel>()
        scope.launch {
            viewModel.autoGeneratedCover.collect {
                uiState = it
            }
        }
        dispatchers.coroutineDispatcher.runBlockingTest { fn() }
        dispatchers.coroutineDispatcher.advanceUntilIdle()
        scope.cancel()
        return uiState
    }

    fun recordEvent(fn: suspend PlayBroSetupCoverViewModelRobot.() -> Unit): List<PlayBroSetupCoverEvent> {
        val scope = CoroutineScope(dispatchers.coroutineDispatcher)
        val uiEvents = mutableListOf<PlayBroSetupCoverEvent>()
        scope.launch {
            viewModel.uiEvent.collect {
                uiEvents.add(it)
            }
        }
        dispatchers.coroutineDispatcher.runBlockingTest { fn() }
        dispatchers.coroutineDispatcher.advanceUntilIdle()
        scope.cancel()
        return uiEvents
    }

    fun handleSetUploadImageCoverTest(cover: PlayCoverUiModel) {
        viewModel.submitAction(PlayBroSetupCoverAction.SetUploadImageCover(cover))
    }

    fun handleSetUploadAutoGeneratedCoverTest() {
        viewModel.submitAction(PlayBroSetupCoverAction.SetUploadAutoGeneratedCover)
    }

    fun handleSelectAutoGeneratedCoverTest(position: Int) {
        viewModel.submitAction(PlayBroSetupCoverAction.SelectAutoGeneratedCover(position))
    }

    fun handleUnSelectAutoGeneratedCoverTest() {
        viewModel.submitAction(PlayBroSetupCoverAction.UnSelectAutoGeneratedCover)
    }

    fun handleGetAutoGeneratedImageCoverPreviewTest() {
        viewModel.submitAction(PlayBroSetupCoverAction.GetAutoGeneratedImageCoverPreview)
    }

    fun handleCheckButtonStateTest() {
        viewModel.submitAction(PlayBroSetupCoverAction.CheckButtonState)
    }

    fun handleRemoveStateAutoGeneratedCoverTest() {
        viewModel.submitAction(PlayBroSetupCoverAction.RemoveStateAutoGeneratedCover)
    }

}
