package com.tokopedia.search.result.shop.presentation.viewmodel

import com.tokopedia.filter.common.data.Option
import com.tokopedia.search.result.shop.presentation.viewmodel.testinstance.dynamicFilterModel
import com.tokopedia.search.result.shop.presentation.viewmodel.testinstance.officialOption
import com.tokopedia.search.result.shop.presentation.viewmodel.testinstance.searchShopModel
import com.tokopedia.search.result.shop.presentation.viewmodel.testinstance.searchShopModelEmptyList
import com.tokopedia.search.result.stubExecute
import com.tokopedia.search.shouldBe
import com.tokopedia.search.shouldContain
import com.tokopedia.search.shouldHaveSize
import org.junit.Test

internal class SearchShopGetActiveFilterOnEmptySearchTest: SearchShopViewModelTestFixtures() {

    private lateinit var activeFilterOptionList: List<Option>

    @Test
    fun `Get active filter as option list`() {
        `Given search shop API will be successful and return empty search shop list`()
        `Given dynamic filter API call will be successful and return data`()
        `Given view goes visible`()

        `When get active filter as option list`()

        `Then Active Filter Option List should be generated by comparing search parameter map and filter list from API`()
    }

    private fun `Given search shop API will be successful and return empty search shop list`() {
        searchShopFirstPageUseCase.stubExecute().returns(searchShopModelEmptyList)
    }

    private fun `Given dynamic filter API call will be successful and return data`() {
        getDynamicFilterUseCase.stubExecute().returns(dynamicFilterModel)
    }

    private fun `Given view goes visible`() {
        searchShopViewModel.onViewVisibilityChanged(isViewAdded = true, isViewVisible = true)
    }

    private fun `When get active filter as option list`() {
        activeFilterOptionList = searchShopViewModel.getActiveFilterOptionListForEmptySearch()
    }

    private fun `Then Active Filter Option List should be generated by comparing search parameter map and filter list from API`() {
        val expectedActiveFilterOptionList = mutableListOf<Option>().also {
            it.add(officialOption)
        }

        activeFilterOptionList shouldHaveSize expectedActiveFilterOptionList.size
        expectedActiveFilterOptionList.forEach { expectedOption ->
            activeFilterOptionList shouldContain expectedOption
        }
    }

    @Test
    fun `Get active filter as option list but search shop is not empty search`() {
        `Given search shop API will be successful and return data`()
        `Given dynamic filter API call will be successful and return data`()
        `Given view goes visible`()

        `When get active filter as option list`()

        `Then Active Filter Option List should be empty, Get Active Filter as Option List only applicable during empty search`()
    }

    private fun `Given search shop API will be successful and return data`() {
        searchShopFirstPageUseCase.stubExecute().returns(searchShopModel)
    }

    private fun `Then Active Filter Option List should be empty, Get Active Filter as Option List only applicable during empty search`() {
        activeFilterOptionList.size shouldBe 0
    }
}