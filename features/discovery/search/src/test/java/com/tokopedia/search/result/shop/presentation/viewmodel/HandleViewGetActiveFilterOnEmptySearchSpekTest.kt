package com.tokopedia.search.result.shop.presentation.viewmodel

import com.tokopedia.filter.common.data.DynamicFilterModel
import com.tokopedia.filter.common.data.Option
import com.tokopedia.search.InstantTaskExecutorRuleSpek
import com.tokopedia.search.result.shop.domain.model.SearchShopModel
import com.tokopedia.search.result.shop.presentation.viewmodel.testinstance.dynamicFilterModel
import com.tokopedia.search.result.shop.presentation.viewmodel.testinstance.officialOption
import com.tokopedia.search.result.shop.presentation.viewmodel.testinstance.searchShopModel
import com.tokopedia.search.result.shop.presentation.viewmodel.testinstance.searchShopModelEmptyList
import com.tokopedia.search.result.stubExecute
import com.tokopedia.search.shouldBe
import com.tokopedia.search.shouldContain
import com.tokopedia.search.shouldHaveSize
import com.tokopedia.usecase.coroutines.UseCase
import org.spekframework.spek2.Spek
import org.spekframework.spek2.style.gherkin.Feature

@Deprecated("Migrated to JUnit")
internal class HandleViewGetActiveFilterOnEmptySearchSpekTest : Spek({

    InstantTaskExecutorRuleSpek(this)

    Feature("Handle View Get Active Filter as List of Option After Empty Search") {
        createTestInstance()

        Scenario("Get active filter as option list") {
            val searchShopFirstPageUseCase by memoized<UseCase<SearchShopModel>>()
            val getDynamicFilterUseCase by memoized<UseCase<DynamicFilterModel>>()
            lateinit var activeFilterOptionList: List<Option>
            lateinit var searchShopViewModel: SearchShopViewModel

            Given("search shop view model") {
                searchShopViewModel = createSearchShopViewModel()
            }

            Given("search shop API will be successful and return empty search shop list") {
                searchShopFirstPageUseCase.stubExecute().returns(searchShopModelEmptyList)
            }

            Given("dynamic filter API call will be successful and return data") {
                getDynamicFilterUseCase.stubExecute().returns(dynamicFilterModel)
            }

            Given("view get search shop first page and get dynamic filter successfully") {
                searchShopViewModel.onViewVisibilityChanged(isViewAdded = true, isViewVisible = true)
            }

            When("get active filter as option list") {
                activeFilterOptionList = searchShopViewModel.getActiveFilterOptionListForEmptySearch()
            }

            Then("Active Filter Option List should be generated by comparing search parameter map and filter list from API") {
                val expectedActiveFilterOptionList = mutableListOf<Option>().also {
                    it.add(officialOption)
                }

                activeFilterOptionList shouldHaveSize expectedActiveFilterOptionList.size
                expectedActiveFilterOptionList.forEach { expectedOption ->
                    activeFilterOptionList shouldContain expectedOption
                }
            }
        }

        Scenario("Get active filter as option list but search shop is not empty search") {
            val searchShopFirstPageUseCase by memoized<UseCase<SearchShopModel>>()
            val getDynamicFilterUseCase by memoized<UseCase<DynamicFilterModel>>()
            lateinit var activeFilterOptionList: List<Option>
            lateinit var searchShopViewModel: SearchShopViewModel

            Given("search shop view model") {
                searchShopViewModel = createSearchShopViewModel()
            }

            Given("search shop API will be successful and return data") {
                searchShopFirstPageUseCase.stubExecute().returns(searchShopModel)
            }

            Given("dynamic filter API call will be successful and return data") {
                getDynamicFilterUseCase.stubExecute().returns(dynamicFilterModel)
            }

            Given("view get search shop first page and get dynamic filter successfully") {
                searchShopViewModel.onViewVisibilityChanged(isViewAdded = true, isViewVisible = true)
            }

            When("get active filter as option list") {
                activeFilterOptionList = searchShopViewModel.getActiveFilterOptionListForEmptySearch()
            }

            Then("Active Filter Option List should be empty. Get Active Filter as Option List only applicable during empty search") {
                activeFilterOptionList.size shouldBe 0
            }
        }
    }
})

