package com.tokopedia.shop_nib.domain.usecase

import com.tokopedia.gql_query_annotation.GqlQueryInterface
import com.tokopedia.graphql.coroutines.data.extensions.getSuccessData
import com.tokopedia.graphql.coroutines.domain.interactor.GraphqlUseCase
import com.tokopedia.graphql.coroutines.domain.repository.GraphqlRepository
import com.tokopedia.graphql.data.model.CacheType
import com.tokopedia.graphql.data.model.GraphqlCacheStrategy
import com.tokopedia.graphql.data.model.GraphqlRequest
import com.tokopedia.shop_nib.data.mapper.SellerSubmitNibStatusMapper
import com.tokopedia.shop_nib.data.response.SellerSubmitNIBStatusResponse
import com.tokopedia.shop_nib.domain.entity.NibSubmissionResult
import com.tokopedia.user.session.UserSessionInterface
import javax.inject.Inject

/**
 * Generated by Tokopedia GQL UseCase Generator plugins version 1.0
 */
class SellerSubmitNIBStatusUseCase @Inject constructor(
    private val repository: GraphqlRepository,
    private val userSession: UserSessionInterface,
    private val mapper: SellerSubmitNibStatusMapper
) : GraphqlUseCase<NibSubmissionResult>(repository) {

    init {
        setCacheStrategy(GraphqlCacheStrategy.Builder(CacheType.ALWAYS_CLOUD).build())
    }


    private val query = object : GqlQueryInterface {
        private val OPERATION_NAME = "sellerSubmitNIBStatus"
        private val QUERY = """query sellerSubmitNIBStatus(${'$'}shopID: String) {
  sellerSubmitNIBStatus(shopID: ${'$'}shopID) {
    result {
      updateTime
      status
    }
    error {
      message
    }
  }
}
"""

        override fun getOperationNameList(): List<String> = listOf(OPERATION_NAME)
        override fun getQuery(): String = QUERY
        override fun getTopOperationName(): String = OPERATION_NAME
    }


    suspend fun execute(): NibSubmissionResult {
        val request = buildRequest()
        val response = repository.response(listOf(request))
        return mapper.map(response.getSuccessData())
    }

    private fun buildRequest(): GraphqlRequest {
        val params = mapOf("shopID" to userSession.shopId)

        return GraphqlRequest(
            query,
            SellerSubmitNIBStatusResponse::class.java,
            params
        )
    }

}
