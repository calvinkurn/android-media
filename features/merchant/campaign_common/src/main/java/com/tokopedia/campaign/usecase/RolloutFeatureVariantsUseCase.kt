package com.tokopedia.campaign.usecase

import com.tokopedia.campaign.data.response.RollenceGradualRollout
import com.tokopedia.gql_query_annotation.GqlQueryInterface
import com.tokopedia.graphql.coroutines.data.extensions.getSuccessData
import com.tokopedia.graphql.coroutines.domain.interactor.GraphqlUseCase
import com.tokopedia.graphql.coroutines.domain.repository.GraphqlRepository
import com.tokopedia.graphql.data.model.CacheType
import com.tokopedia.graphql.data.model.GraphqlCacheStrategy
import com.tokopedia.graphql.data.model.GraphqlRequest
import javax.inject.Inject

/**
 * Generated by Tokopedia GQL UseCase Generator plugins version 1.0
 */
class RolloutFeatureVariantsUseCase @Inject constructor(
    private val repository: GraphqlRepository
) : GraphqlUseCase<RollenceGradualRollout>(repository) {

    init {
        setCacheStrategy(GraphqlCacheStrategy.Builder(CacheType.ALWAYS_CLOUD).build())
    }

    private val query = object : GqlQueryInterface {
        private val OPERATION_NAME = "RolloutFeatureVariants"
        private val QUERY = """query RolloutFeatureVariants(${'$'}rev: Int!, ${'$'}client_id: Int!, ${'$'}id: String, ${'$'}iris_session_id: String){
                RolloutFeatureVariants(rev:${'$'}rev, client_id:${'$'}client_id, id:${'$'}id, iris_session_id: ${'$'}iris_session_id){
                    featureVariants {
                        feature
                        variant
                    }
                }
            }
        """

        override fun getOperationNameList(): List<String> = listOf(OPERATION_NAME)
        override fun getQuery(): String = QUERY
        override fun getTopOperationName(): String = OPERATION_NAME
    }

    suspend fun execute(param: Param): RollenceGradualRollout {
        val request = buildRequest(param)
        val response = repository.response(listOf(request))
        return response.getSuccessData<RollenceGradualRollout>()
    }

    private fun buildRequest(param: Param): GraphqlRequest {
        val params = mapOf(
            "rev" to param.rev,
            "client_id" to param.client_id,
            "id" to param.id,
            "iris_session_id" to param.iris_session_id
        )

        return GraphqlRequest(
            query,
            RollenceGradualRollout::class.java,
            params
        )
    }

    data class Param(
        val rev: Int,
        val client_id: Int,
        val id: String,
        val iris_session_id: String
    )
}
