package com.tokopedia.shop.campaign.domain.usecase

import com.tokopedia.gql_query_annotation.GqlQueryInterface
import com.tokopedia.graphql.coroutines.data.extensions.getSuccessData
import com.tokopedia.graphql.coroutines.domain.interactor.GraphqlUseCase
import com.tokopedia.graphql.coroutines.domain.repository.GraphqlRepository
import com.tokopedia.graphql.data.model.CacheType
import com.tokopedia.graphql.data.model.GraphqlCacheStrategy
import com.tokopedia.graphql.data.model.GraphqlRequest
import com.tokopedia.shop.campaign.data.response.GetMerchantVoucherListResponse
import com.tokopedia.shop.campaign.data.mapper.GetMerchantVoucherListMapper
import com.tokopedia.shop.campaign.domain.entity.ExclusiveLaunchVoucher
import com.tokopedia.user.session.UserSessionInterface
import javax.inject.Inject

/**
 * Generated by Tokopedia GQL UseCase Generator plugins version 1.0
 */
class GetMerchantVoucherListUseCase @Inject constructor(
    private val repository: GraphqlRepository,
    private val userSession: UserSessionInterface,
    private val mapper: GetMerchantVoucherListMapper
) : GraphqlUseCase<List<ExclusiveLaunchVoucher>>(repository) {

    init {
        setCacheStrategy(GraphqlCacheStrategy.Builder(CacheType.ALWAYS_CLOUD).build())
    }

    companion object {
        private const val REQUEST_PARAM_PAGE_SOURCE = "shop_page"
    }

    private val query = object : GqlQueryInterface {
        private val OPERATION_NAME = "tokopointsCatalogMVCList"
        private val QUERY =
            """query tokopointsCatalogMVCList(${'$'}shopID: String, ${'$'}productID: String, ${'$'}source: String) {
  tokopointsCatalogMVCList(shopID: ${'$'}shopID, productID: ${'$'}productID, source: ${'$'}source) {
    resultStatus {
      code
      message
      status
    }
    catalogList {
      quotaLeft
      quotaLeftLabel
      baseCode
      eligibleProductIDsLabel
      catalogType
      promoType
      expiredDate
      maximumBenefitAmount
      minimumUsageLabel
      title
      expiredLabel
      minimumUsageAmount
      id
      promoID
      slug
    }
  }
}
"""

        override fun getOperationNameList(): List<String> = listOf(OPERATION_NAME)
        override fun getQuery(): String = QUERY
        override fun getTopOperationName(): String = OPERATION_NAME
    }


    suspend fun execute(): List<ExclusiveLaunchVoucher> {
        val request = buildRequest()
        val response = repository.response(listOf(request))
        val data = response.getSuccessData<GetMerchantVoucherListResponse>()

        return mapper.map(data)
    }

    private fun buildRequest(): GraphqlRequest {
        val params = mapOf(
            "shopID" to "11694144",
            "source" to REQUEST_PARAM_PAGE_SOURCE
        )

        return GraphqlRequest(
            query,
            GetMerchantVoucherListResponse::class.java,
            params
        )
    }


}
