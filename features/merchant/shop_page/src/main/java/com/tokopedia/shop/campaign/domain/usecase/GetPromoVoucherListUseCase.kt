package com.tokopedia.shop.campaign.domain.usecase

import com.tokopedia.gql_query_annotation.GqlQueryInterface
import com.tokopedia.graphql.coroutines.data.extensions.getSuccessData
import com.tokopedia.graphql.coroutines.domain.interactor.GraphqlUseCase
import com.tokopedia.graphql.coroutines.domain.repository.GraphqlRepository
import com.tokopedia.graphql.data.model.CacheType
import com.tokopedia.graphql.data.model.GraphqlCacheStrategy
import com.tokopedia.graphql.data.model.GraphqlRequest
import com.tokopedia.shop.campaign.data.mapper.GetPromoVoucherListMapper
import com.tokopedia.shop.campaign.data.response.GetPromoVoucherListMapperResponse
import com.tokopedia.shop.campaign.domain.entity.ExclusiveLaunchVoucher
import javax.inject.Inject

/**
 * Generated by Tokopedia GQL UseCase Generator plugins version 1.0
 */
class GetPromoVoucherListUseCase @Inject constructor(
    private val repository: GraphqlRepository,
    private val mapper: GetPromoVoucherListMapper
) : GraphqlUseCase<List<ExclusiveLaunchVoucher>>(repository) {

    init {
        setCacheStrategy(GraphqlCacheStrategy.Builder(CacheType.ALWAYS_CLOUD).build())
    }

    companion object {
        private const val REQUEST_PARAM_KEY_CATEGORY_SLUG = "categorySlug"
        private const val REQUEST_PARAM_KEY_CATEGORY_SLUGS = "catalogSlugs"
    }

    private val query = object : GqlQueryInterface {
        private val OPERATION_NAME = "tokopointsCatalogWithCouponList"
        private val QUERY =
            """query tokopointsCatalogWithCouponList(${'$'}categorySlug: String!, ${'$'}catalogSlugs: [String!]){
  tokopointsCatalogWithCouponList(categorySlug: ${'$'}categorySlug, catalogSlugs : ${'$'}catalogSlugs) {
    resultStatus {
      code
      status
      message
    }
    catalogWithCouponList {
      id
      promoID
      quota
      title
      subTitle
      isDisabled
      disableErrorMessage
      thumbnailUrl
      thumbnailUrlMobile
      imageUrl
      imageUrlMobile
      slug
      baseCode
      upperTextDesc
      isDisabledButton
      catalogType
      couponCode
      cta
      ctaDesktop
      minimumUsageLabel
      minimumUsage
      smallImageUrl
      smallImageUrlMobile
      buttonStr
      url
      appLink
    }
    countdownInfo {
      isShown
      type
      label
      countdownUnix
      countdownStr
      textColor
      backgroundColor
    }
  }
}
"""

        override fun getOperationNameList(): List<String> = listOf(OPERATION_NAME)
        override fun getQuery(): String = QUERY
        override fun getTopOperationName(): String = OPERATION_NAME
    }


    suspend fun execute(voucherSlugs: List<String>): List<ExclusiveLaunchVoucher> {
        val request = buildRequest(voucherSlugs)
        val response = repository.response(listOf(request))
        val data = response.getSuccessData<GetPromoVoucherListMapperResponse>()

        return mapper.map(data)
    }

    private fun buildRequest(voucherSlugs: List<String>): GraphqlRequest {
        val params = mapOf(
            REQUEST_PARAM_KEY_CATEGORY_SLUG to "",
            REQUEST_PARAM_KEY_CATEGORY_SLUGS to voucherSlugs
        )

        return GraphqlRequest(
            query,
            GetPromoVoucherListMapperResponse::class.java,
            params
        )
    }

}
