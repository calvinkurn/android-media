package com.tokopedia.shop.campaign.domain.usecase

import com.tokopedia.gql_query_annotation.GqlQueryInterface
import com.tokopedia.graphql.coroutines.data.extensions.getSuccessData
import com.tokopedia.graphql.coroutines.domain.interactor.GraphqlUseCase
import com.tokopedia.graphql.coroutines.domain.repository.GraphqlRepository
import com.tokopedia.graphql.data.model.CacheType
import com.tokopedia.graphql.data.model.GraphqlCacheStrategy
import com.tokopedia.graphql.data.model.GraphqlRequest
import com.tokopedia.shop.campaign.data.mapper.GetVoucherDetailMapper
import com.tokopedia.shop.campaign.data.response.GetVoucherDetailResponse
import com.tokopedia.shop.campaign.domain.entity.VoucherDetail
import com.tokopedia.shop.common.constant.ShopPageConstant
import javax.inject.Inject

/**
 * Generated by Tokopedia GQL UseCase Generator plugins version 1.0
 */
class GetVoucherDetailUseCase @Inject constructor(
    private val repository: GraphqlRepository,
    private val mapper: GetVoucherDetailMapper
) : GraphqlUseCase<VoucherDetail>(repository) {

    companion object {
        private const val REQUEST_PARAM_KEY_API_VERSION = "apiVersion"
        private const val REQUEST_PARAM_KEY_SLUG = "slug"
    }
    init {
        setCacheStrategy(GraphqlCacheStrategy.Builder(CacheType.ALWAYS_CLOUD).build())
    }

    private val query = object : GqlQueryInterface {
        private val OPERATION_NAME = "hachikoCatalogDetail"
        private val QUERY =
            """query hachikoCatalogDetail(${'$'}apiVersion: String, ${'$'}slug: String) {
  hachikoCatalogDetail(apiVersion: ${'$'}apiVersion, slug: ${'$'}slug) {
    button_str
    points_slash_str
    expired_label
    discount_percentage_str
    minimumUsageLabel
    discount_percentage
    how_to_use
    title
    thumbnail_url
    points
    cta
    expired
    expired_str
    quota
    id
    activePeriodDate
    points_str
    points_slash
    overview
    sub_title
    thumbnail_url_mobile
    activePeriod
    image_url
    is_disabled
    disable_error_message
    tnc
    is_disabled_button
    image_url_mobile
    is_gift
    upper_text_desc
    catalog_type
    minimumUsage
  }
}
"""

        override fun getOperationNameList(): List<String> = listOf(OPERATION_NAME)
        override fun getQuery(): String = QUERY
        override fun getTopOperationName(): String = OPERATION_NAME
    }


    suspend fun execute(categorySlug: String): VoucherDetail {
        val request = buildRequest(categorySlug)
        val response = repository.response(listOf(request))
        val data = response.getSuccessData<GetVoucherDetailResponse>()

        return mapper.map(data)
    }

    private fun buildRequest(categorySlug: String): GraphqlRequest {
        val params = mapOf(
            REQUEST_PARAM_KEY_SLUG to categorySlug,
            REQUEST_PARAM_KEY_API_VERSION to ShopPageConstant.HACHIKO_VOUCHER_GRAPHQL_API_VERSION,
        )

        return GraphqlRequest(
            query,
            GetVoucherDetailResponse::class.java,
            params
        )
    }
}
