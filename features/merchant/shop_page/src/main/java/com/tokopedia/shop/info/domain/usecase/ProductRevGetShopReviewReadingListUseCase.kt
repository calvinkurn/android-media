package com.tokopedia.shop.info.domain.usecase

import com.tokopedia.gql_query_annotation.GqlQueryInterface
import com.tokopedia.graphql.coroutines.data.extensions.getSuccessData
import com.tokopedia.graphql.coroutines.domain.interactor.GraphqlUseCase
import com.tokopedia.graphql.coroutines.domain.repository.GraphqlRepository
import com.tokopedia.graphql.data.model.CacheType
import com.tokopedia.graphql.data.model.GraphqlCacheStrategy
import com.tokopedia.graphql.data.model.GraphqlRequest
import com.tokopedia.shop.info.data.mapper.ProductRevGetShopReviewReadingListMapper
import com.tokopedia.shop.info.data.response.ProductRevGetShopReviewReadingListResponse
import com.tokopedia.shop.info.domain.entity.ShopReview
import javax.inject.Inject

/**
 * Generated by Tokopedia GQL UseCase Generator plugins version 1.0
 */
class ProductRevGetShopReviewReadingListUseCase @Inject constructor(
    private val repository: GraphqlRepository,
    private val mapper: ProductRevGetShopReviewReadingListMapper
) : GraphqlUseCase<ProductRevGetShopReviewReadingListResponse>(repository) {

    init {
        setCacheStrategy(GraphqlCacheStrategy.Builder(CacheType.ALWAYS_CLOUD).build())
    }


    private val query = object : GqlQueryInterface {
        private val OPERATION_NAME = "productrevGetShopReviewReadingList"
        private val QUERY =
            """query productrevGetShopReviewReadingList(${'$'}shopID: String!, ${'$'}limit: Int!, ${'$'}page: Int!, ${'$'}filterBy: String, ${'$'}sortBy: String) {
  productrevGetShopReviewReadingList(shopID: ${'$'}shopID, limit: ${'$'}limit, page: ${'$'}page, filterBy: ${'$'}filterBy, sortBy: ${'$'}sortBy) {
    list {
      reviewID
      rating
      likeDislike {
        totalLike
        likeStatus
      }
      reviewerName
      reviewerLabel
      reviewerID
      reviewTime
      reviewText
      avatar
    }
    totalReviews
  }
}
"""

        override fun getOperationNameList(): List<String> = listOf(OPERATION_NAME)
        override fun getQuery(): String = QUERY
        override fun getTopOperationName(): String = OPERATION_NAME
    }


    suspend fun execute(param: Param): ShopReview {
        val request = buildRequest(param)
        val response = repository.response(listOf(request))
        return mapper.map(response.getSuccessData())
    }

    private fun buildRequest(param: Param): GraphqlRequest {
        val params = mutableMapOf<String, Any>(
            "shopID" to param.shopID,
            "limit" to param.limit,
            "page" to param.page,
            "filterBy" to param.filterBy,
            "sortBy" to param.sortBy
        )

        return GraphqlRequest(
            query,
            ProductRevGetShopReviewReadingListResponse::class.java,
            params
        )
    }

    data class Param(
        val shopID: String,
        val page: Int,
        val limit: Int,
        val filterBy: String = "",
        val sortBy: String = ""
    )

}
