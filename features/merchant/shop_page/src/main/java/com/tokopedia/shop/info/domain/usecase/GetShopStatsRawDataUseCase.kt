package com.tokopedia.shop.info.domain.usecase

import com.tokopedia.gql_query_annotation.GqlQueryInterface
import com.tokopedia.graphql.coroutines.data.extensions.getSuccessData
import com.tokopedia.graphql.coroutines.domain.interactor.GraphqlUseCase
import com.tokopedia.graphql.coroutines.domain.repository.GraphqlRepository
import com.tokopedia.graphql.data.model.CacheType
import com.tokopedia.graphql.data.model.GraphqlCacheStrategy
import com.tokopedia.graphql.data.model.GraphqlRequest
import com.tokopedia.shop.info.data.mapper.GetShopStatsRawDataMapper
import com.tokopedia.shop.info.data.request.GetShopStatsRawDataRequestParam
import com.tokopedia.shop.info.data.response.GetShopStatsRawDataResponse
import com.tokopedia.shop.info.domain.entity.ShopStatsRawData
import javax.inject.Inject

/**
 * Generated by Tokopedia GQL UseCase Generator plugins version 1.0
 */
class GetShopStatsRawDataUseCase @Inject constructor(
    private val repository: GraphqlRepository,
    private val mapper: GetShopStatsRawDataMapper
) : GraphqlUseCase<GetShopStatsRawDataResponse>(repository) {

    init {
        setCacheStrategy(GraphqlCacheStrategy.Builder(CacheType.ALWAYS_CLOUD).build())
    }

    private val query = object : GqlQueryInterface {
        private val OPERATION_NAME = "getShopStatsRawData"
        private val QUERY = """query getShopStatsRawData(${'$'}input: ShopStatsRawDataParam!) {
  getShopStatsRawData(input: ${'$'}input) {
    result {
      chatAndDiscussionReplySpeed
    }
    error {
      message
    }
  }
}
"""

        override fun getOperationNameList(): List<String> = listOf(OPERATION_NAME)
        override fun getQuery(): String = QUERY
        override fun getTopOperationName(): String = OPERATION_NAME
    }

    suspend fun execute(param: Param): ShopStatsRawData {
        val request = buildRequest(param)
        val response = repository.response(listOf(request))
        return mapper.map(response.getSuccessData())
    }

    private fun buildRequest(param: Param): GraphqlRequest {
        val params = mapOf(
            "input" to GetShopStatsRawDataRequestParam(
                shopID = param.shopId,
                source = param.source
            )
        )

        return GraphqlRequest(
            query,
            GetShopStatsRawDataResponse::class.java,
            params
        )
    }

    data class Param(val shopId: String, val source: String)
}
