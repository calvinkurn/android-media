package com.tokopedia.bmsm_widget.domain.usecase

import android.annotation.SuppressLint
import com.tokopedia.bmsm_widget.data.mapper.GetOfferProductsBenefitListMapper
import com.tokopedia.bmsm_widget.data.request.GetOfferProductsBenefitListRequest
import com.tokopedia.bmsm_widget.data.response.GetOfferProductsBenefitListResponse
import com.tokopedia.bmsm_widget.domain.entity.PageSource
import com.tokopedia.bmsm_widget.domain.entity.TierGift
import com.tokopedia.bmsm_widget.domain.entity.TierGifts
import com.tokopedia.config.GlobalConfig
import com.tokopedia.gql_query_annotation.GqlQueryInterface
import com.tokopedia.graphql.coroutines.data.extensions.getSuccessData
import com.tokopedia.graphql.coroutines.domain.interactor.GraphqlUseCase
import com.tokopedia.graphql.coroutines.domain.repository.GraphqlRepository
import com.tokopedia.graphql.data.model.CacheType
import com.tokopedia.graphql.data.model.GraphqlCacheStrategy
import com.tokopedia.graphql.data.model.GraphqlRequest
import com.tokopedia.kotlin.extensions.view.toLongOrZero
import com.tokopedia.localizationchooseaddress.domain.model.LocalCacheModel
import javax.inject.Inject

/**
 * Generated by Tokopedia GQL UseCase Generator plugins version 1.0
 */
class GetOfferProductsBenefitListUseCase @Inject constructor(
    private val repository: GraphqlRepository,
    private val mapper: GetOfferProductsBenefitListMapper
) : GraphqlUseCase<GetOfferProductsBenefitListResponse>(repository) {

    init {
        setCacheStrategy(GraphqlCacheStrategy.Builder(CacheType.ALWAYS_CLOUD).build())
    }

    private val query = object : GqlQueryInterface {
        private val OPERATION_NAME = "GetOfferProductsBenefitList"
        private val QUERY =
            """query GetOfferProductsBenefitList(${'$'}params: GetOfferProductsBenefitListRequest!) {
  GetOfferProductsBenefitList(params: ${'$'}params) {
    response_header {
      status
      success
      errorMessage
    }
    tier_list_gift {
      tier_id
      tier_name
      tier_message
      max_benefit_qty
      is_eligible
      products {
        product_id
        warehouse_id
        quantity
        stock
        product_name
        product_cache_image_url
        originalPrice
        finalPrice
        is_oos
      }
    }
  }
}
            """.trimIndent()

        override fun getOperationNameList(): List<String> = listOf(OPERATION_NAME)
        override fun getQuery(): String = QUERY
        override fun getTopOperationName(): String = OPERATION_NAME
    }

    suspend fun execute(param: Param): List<TierGift> {
        val request = buildRequest(param)
        val response = repository.response(listOf(request))
        return mapper.map(response.getSuccessData())
    }

    private fun buildRequest(param: Param): GraphqlRequest {
        val params = mapOf("params" to param.toRequestParams())

        return GraphqlRequest(
            query,
            GetOfferProductsBenefitListResponse::class.java,
            params
        )
    }

    data class Param(val source: PageSource, val filter: Filter, val userCache: LocalCacheModel) {
        data class Filter(
            val offerId: Long,
            val tierProduct: List<TierGifts> = emptyList(),
            val warehouseId: Long = 0
        )
    }

    @SuppressLint("PII Data Exposure")
    private fun Param.toRequestParams(): GetOfferProductsBenefitListRequest {
        val source = when (source) {
            PageSource.OFFER_LANDING_PAGE -> "offer_page"
            PageSource.CART -> "cart_page"
            PageSource.MINICART_NOW -> "minicart_now"
        }

        return GetOfferProductsBenefitListRequest(
            requestHeader = GetOfferProductsBenefitListRequest.RequestHeader(
                device = "android",
                ip = "",
                source = source,
                useCase = source,
                version = GlobalConfig.VERSION_NAME
            ),
            filter = GetOfferProductsBenefitListRequest.Filter(
                offerId = filter.offerId,
                tierProduct = filter.tierProduct.map { tierProduct ->
                    GetOfferProductsBenefitListRequest.Filter.TierProduct(
                        productBenefit = tierProduct.gifts.map { product ->
                            GetOfferProductsBenefitListRequest.Filter.TierProduct.ProductBenefit(
                                productId = product.productId,
                                quantity = product.quantity
                            )
                        },
                        tierId = tierProduct.tierId
                    )
                },
                warehouseId = filter.warehouseId
            ),
            userLocation = GetOfferProductsBenefitListRequest.UserLocation(
                districtId = userCache.district_id.toLongOrZero(),
                postalCode = userCache.postal_code,
                latitude = userCache.lat,
                longitude = userCache.long,
                addressId = userCache.address_id.toLongOrZero(),
                cityId = userCache.city_id.toLongOrZero()
            )
        )
    }
}
