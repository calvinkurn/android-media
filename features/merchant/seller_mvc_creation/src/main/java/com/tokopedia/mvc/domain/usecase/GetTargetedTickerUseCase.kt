package com.tokopedia.mvc.domain.usecase

import com.tokopedia.gql_query_annotation.GqlQueryInterface
import com.tokopedia.graphql.coroutines.data.extensions.getSuccessData
import com.tokopedia.graphql.coroutines.domain.interactor.GraphqlUseCase
import com.tokopedia.graphql.coroutines.domain.repository.GraphqlRepository
import com.tokopedia.graphql.data.model.CacheType
import com.tokopedia.graphql.data.model.GraphqlCacheStrategy
import com.tokopedia.graphql.data.model.GraphqlRequest
import com.tokopedia.mvc.data.request.GetTargetedTickerRequest
import com.tokopedia.mvc.data.response.GetTargetedTickerResponse
import javax.inject.Inject

/**
 * Generated by Tokopedia GQL UseCase Generator plugins version 1.0
 */
class GetTargetedTickerUseCase @Inject constructor(
    private val repository: GraphqlRepository
) : GraphqlUseCase<GetTargetedTickerResponse>(repository) {

    init {
        setCacheStrategy(GraphqlCacheStrategy.Builder(CacheType.ALWAYS_CLOUD).build())
    }


    private val query = object : GqlQueryInterface {
        private val OPERATION_NAME = "GetTargetedTicker"
        private val QUERY = """query GetTargetedTicker(${'$'}input: GetTargetedTickerRequest!) {
  GetTargetedTicker(input: ${'$'}input) {
    List {
      Action {
        Type
        AppURL
        Label
        WebURL
      }
      Type
      Content
      Priority
      Title
      ID
    }
  }
}
"""

        override fun getOperationNameList(): List<String> = listOf(OPERATION_NAME)
        override fun getQuery(): String = QUERY
        override fun getTopOperationName(): String = OPERATION_NAME
    }


    suspend fun execute(param: Param): GetTargetedTickerResponse {
        val request = buildRequest(param)
        val response = repository.response(listOf(request))
        return response.getSuccessData()
    }

    private fun buildRequest(param: Param): GraphqlRequest {
        val targets = param.targets.map {
            GetTargetedTickerRequest.Target(it.type, it.values)
        }

        val payload = GetTargetedTickerRequest(param.page, targets)

        val params = mapOf("input" to payload)

        return GraphqlRequest(
            query,
            GetTargetedTickerResponse::class.java,
            params
        )
    }

    data class Param(val page: String, val targets: List<Target> = emptyList()) {
        data class Target(val type: String, val values: List<String>)
    }

}
