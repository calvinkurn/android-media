apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

def getDpiId(String density) {

    def DPI_ID = ['null': 0, 'mdpi': 1, 'hdpi': 2, 'xhdpi': 3, 'xxhdpi': 4]
    if (density != null)
        return DPI_ID.get(density);
    return 0;
}

def allowSplit() {
    return gradle.startParameter.taskNames.contains("assembleRelease") &&
            project.hasProperty('tkpdBuildType') && tkpdBuildType == "production"
}

def allowProguard() {
    return project.hasProperty('tkpdBuildType')
}

def allowDistribution() {
    if ( project.hasProperty('tkpdBuildType') && tkpdBuildType == "hockeyapp") {
        return "true";
    }
    return "false";
}

def getTkpdVersionCode() {
    return project.hasProperty('versionCode') ? Integer.parseInt(versionCode) : project.defaultVersionCode;
}

def getTkpdVersionName() {
    return project.hasProperty('versionName') ? versionName : project.defaultVersionName;
}

def archiveAPK(variant, output) {

    String density = output.getFilter(com.android.build.OutputFile.DENSITY);
    def originZipAlignedApkFile = output.outputFile;
    def renameAPKFile = renameAPKFile(variant, density, output.versionCodeOverride);
    copy {
        from "$originZipAlignedApkFile"
        into getAPKArchiveFolder(variant)
        rename("$originZipAlignedApkFile.name", "$renameAPKFile")
    }
}

def renameAPKFile(variant, density, versionCode) {
    def fileName = variant.name.toUpperCase()
    fileName += "-" + variant.mergedFlavor.versionName;
    fileName += "-V" + versionCode;
    fileName += "-" + density;
    fileName += ".apk";
    return fileName;
}

def getAPKArchiveFolder(variant) {
    return "/Android/launching-android/" + "V" + variant.mergedFlavor.versionCode;
}

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    project.ext {
        defaultVersionCode = 1;
        defaultVersionName = "1.0";
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/rxjava.properties'
    }

    defaultConfig {
        applicationId "com.tokopedia.posapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        packagingOptions {
            exclude "lib/arm64-v8a/libgnustl_shared.so"
        }

    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            zipAlignEnabled false
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            if (allowProguard()) {
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            } else {
                proguardFiles 'proguard-rules.txt'
            }
            ext.betaDistributionReleaseNotesFilePath = 'release_notes.txt'
            ext.betaDistributionGroupAliasesFilePath = 'group_beta.txt'
            if (allowSplit()) {
                applicationVariants.all { variant ->
                    variant.outputs.each { output ->
                        String density = output.getFilter(com.android.build.OutputFile.DENSITY);
                        output.versionCodeOverride = (getTkpdVersionCode() * 100) + getDpiId(density);
                    }
                    variant.assemble.doLast {
                        variant.outputs.each { output ->
                            if (output.zipAlign) {
                                archiveAPK(variant, output);
                            }
                        }
                    }
                }
            } else {
                applicationVariants.all { variant ->
                    variant.outputs.each { output ->
                        output.versionCodeOverride = (getTkpdVersionCode() * 100);
                    }
                }
            }
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['assets', 'src/main/assets', 'src/main/assets/']
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    dexOptions {
        javaMaxHeapSize "8g"
        keepRuntimeAnnotatedClasses false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
        resolutionStrategy.force 'com.squareup.okio:okio:1.11.0'
    }
    flavorDimensions "tier"

    productFlavors {
        staging {
            dimension "tier"
        }
        live {
            dimension "tier"
        }
    }
}

dependencies {
    implementation project(rootProject.ext.features.core)
    implementation project(rootProject.ext.libraries.design)
    implementation project(rootProject.ext.libraries.reactNative)
    implementation project(rootProject.ext.libraries.cacheApi)
    implementation project(rootProject.ext.libraries.useCase)
    implementation project(rootProject.ext.libraries.abstraction)
    implementation project(rootProject.ext.libraries.network)
    implementation project(rootProject.ext.features.session)
    implementation project(rootProject.ext.features.discovery)
    implementation project(rootProject.ext.features.productDetail)
    implementation project(rootProject.ext.features.seller)
    implementation project(rootProject.ext.features.otp)
    implementation project(rootProject.ext.features.payment)

    implementation rootProject.ext.miscDependencies.reactNative
    implementation rootProject.ext.miscDependencies.codePushReactNative

    annotationProcessor rootProject.ext.dbDependencies.dbFlowProcessor
    implementation rootProject.ext.dbDependencies.dbFlowCore
    implementation rootProject.ext.dbDependencies.dbFlow

    compileOnly rootProject.ext.miscDependencies.javaxAnnotation
    implementation rootProject.ext.miscDependencies.dagger
    annotationProcessor rootProject.ext.miscDependencies.daggerCompiler
    implementation rootProject.ext.miscDependencies.cardio

    implementation rootProject.ext.deeplinkDispatchDependencies.deeplinkDispatch
    annotationProcessor rootProject.ext.deeplinkDispatchDependencies.deeplinkDispatchProcessor

    implementation rootProject.ext.miscDependencies.multiDex

    implementation rootProject.ext.supportLibDependencies.supportV4
    implementation rootProject.ext.supportLibDependencies.appCompactV7
    implementation rootProject.ext.supportLibDependencies.supportV13
    implementation rootProject.ext.supportLibDependencies.design
    implementation rootProject.ext.supportLibDependencies.cardViewV7

    implementation rootProject.ext.miscDependencies.rxAndroid
    implementation rootProject.ext.miscDependencies.rxJava
    implementation rootProject.ext.miscDependencies.rxJavaMath

    implementation rootProject.ext.networkDependencies.retrofit
    implementation rootProject.ext.networkDependencies.converterGson
    implementation rootProject.ext.networkDependencies.adapterRxJava
    implementation rootProject.ext.networkDependencies.okHttp
    implementation rootProject.ext.networkDependencies.loggingInterceptor
    implementation rootProject.ext.miscDependencies.gson
    implementation rootProject.ext.supportLibDependencies.kotlinSupport
    implementation (rootProject.ext.debugToolsDependencies.chuck) {
        exclude group: 'com.squareup.okhttp3'
        exclude group: 'com.squareup.okio'
        exclude group: 'com.android.support'
    }
}

apply from: "../buildconfig/reactnative/react.gradle"
apply from: "../buildconfig/reactnative/codepush.gradle"