apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.google.gms:google-services:4.1.0'
    }
}

def getTkpdKelontongVersionCode() {
    return project.hasProperty('versionCode') ? Integer.parseInt(versionCode) : project.defaultVersionCode;
}

def getTkpdKelontongVersionName() {
    return project.hasProperty('versionName') ? versionName : project.defaultVersionName;
}

def allowProguard() {
    return project.hasProperty('tkpdBuildType')
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    project.ext {
        defaultVersionCode = 1;
        defaultVersionName = "1.0";
    }

    defaultConfig {
        applicationId "com.tokopedia.kelontongapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getTkpdKelontongVersionCode()
        versionName getTkpdKelontongVersionName()

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            if (allowProguard()) {
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            } else {
                proguardFiles 'proguard-rules.txt'
            }
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            if (allowProguard()) {
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            } else {
                proguardFiles 'proguard-rules.txt'
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "server"

    productFlavors {
        live {
            dimension "server"
        }
        staging {
            dimension "server"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation rootProject.ext.supportLibDependencies.appCompactV7
    implementation rootProject.ext.supportLibDependencies.kotlinSupportJdk7

    api (rootProject.ext.serviceDependencies.crashlytics) {
        transitive = true
    }

    implementation rootProject.ext.playServicesDependencies.firebase
    implementation rootProject.ext.playServicesDependencies.firebaseAnalytics
    implementation rootProject.ext.analyticsDependencies.appsflyer
    implementation rootProject.ext.analyticsDependencies.installRef

    implementation (rootProject.ext.analyticsDependencies.moengage) {
        exclude group: 'com.moengage', module: 'moe-push-firebase'
    }
    implementation rootProject.ext.analyticsDependencies.moengageFirebase

    testImplementation rootProject.ext.testDependencies.junit
}

apply plugin: 'com.google.gms.google-services'