apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-android'
if (project.hasProperty("enable-shrinkresource")) {
    apply from: "$rootProject.projectDir/buildconfig/appcompile/enable-shrinkresource.gradle"
}
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'io.hansel.preprocessor'

apply from: '../tools/dynamic_feature_inclusion.gradle'
apply from: '../tools/set_debug_tools.gradle'

def isProduction() {
    return project.hasProperty('tkpdBuildType') && tkpdBuildType == "production";
}

def allowDistribution() {
    if (project.hasProperty('tkpdBuildType') && tkpdBuildType == "hockeyapp") {
        return "true";
    }
    return "false";
}

def isDebugTraceEnabled() {
    if (project.hasProperty('debugTrace') && debugTrace == "true") {
        return "true";
    }
    return "false";
}

def isPreInstall() {
    if (project.hasProperty('isPreInstall') && isPreInstall == "true") {
        return "true"
    }
    return "false"
}

def getDynamicProperty(param) {
    if (project.hasProperty(param)) {
        return project.property(param)
    }
    return ""
}

def devMode() {
    return !project.hasProperty('tkpdBuildType')
}

def getTkpdVersionCode() {
    return project.hasProperty('versionCode') ? Integer.parseInt(versionCode) : project.defaultVersionCode;
}

def getTkpdVersionName() {
    return project.hasProperty('versionName') ? versionName : project.defaultVersionName;
}

def isFirebasePerformanceLogEnabled() {
    if (project.hasProperty('firebasePerformanceLogEnabled') && firebasePerformanceLogEnabled == "true") {
        return "true"
    }
    return "false"
}

project.ext {
    defaultVersionCode = 418001101;
    defaultVersionName = "3.80";
    react = [
            nodeExecutableAndArgs: ["${nodeExecutableAndArgs}"],
            enableHermes         : true,
    ]
}

//def hermesPath = "../hermes/";
def jscFlavor = 'org.webkit:android-jsc:+'
def enableHermes = project.ext.react.get("enableHermes", false);

buildscript {
    repositories {
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        mavenCentral()
        jcenter()
        maven { url 'https://maven-hansel.tokopedia.com/maven' }
        maven {
            url 'https://www.jitpack.io'
        }
    }
    dependencies {
        classpath rootProject.ext.gradlePlugin.crashlytics
        classpath rootProject.ext.miscDependencies.hansel
        classpath rootProject.ext.gradlePlugin.googleServices
    }
}
ext.lintchecks = [
        'SetColourUsageError',
        'CoreResourcesUsageError',
        'VectorDrawableCompat',
        'TypographyOverTextViewUsage'
] as String[]


android {

    packagingOptions {
        exclude 'META-INF/**'
        pickFirst '**/armeabi-v7a/libc++_shared.so'
        pickFirst '**/x86/libc++_shared.so'
        pickFirst '**/arm64-v8a/libc++_shared.so'
        pickFirst '**/x86_64/libc++_shared.so'
        pickFirst '**/x86/libjsc.so'
        pickFirst '**/armeabi-v7a/libjsc.so'
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    useLibrary 'org.apache.http.legacy'
    sourceSets {

        main {
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['assets', 'src/main/assets', 'src/main/assets/']
            jniLibs.srcDirs = ["jniLibs"]
        }

        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lintOptions {
        checkReleaseBuilds false
        checkDependencies true
        htmlReport false
        warningsAsErrors false
        abortOnError false
        check lintchecks
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
    }

    buildTypes {
        debug {
            defaultConfig.minSdkVersion project.property("minSdkVersionDebug")
            signingConfig signingConfigs.debug
            minifyEnabled false
            zipAlignEnabled false
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            proguardFiles 'proguard-rules.txt'
            buildConfigField "boolean", "IS_PREINSTALL", "false"
            buildConfigField "String", "PREINSTALL_NAME", "\"\""
            buildConfigField "String", "PREINSTALL_DESC", "\"\""
            buildConfigField "String", "PREINSTALL_SITE", "\"\""
            buildConfigField "boolean", "ENABLE_DEBUG_TRACE", isDebugTraceEnabled()
            buildConfigField "String", "DEBUG_TRACE_NAME", "\"${getDynamicProperty("debugTraceName")}\""
            ext.enableHansel = project.hasProperty('hanselEnableDebug')
            FirebasePerformance {
                // Set this flag to 'false' to disable @AddTrace annotation processing and
                // automatic HTTP/S network request monitoring
                // for a specific build variant at compile time.
                instrumentationEnabled project.property("firebasePerformanceDebug").toBoolean()
            }
        }
        release {
            if (devMode()) {
                signingConfig signingConfigs.debug
            }
            debuggable = project.hasProperty('enableDebug') && enableDebug == "true"
            ext.enableHansel = !project.hasProperty('hanselDisableRelease')

            if (isFirebasePerformanceLogEnabled().toBoolean()) {
                minifyEnabled false
            } else {
                minifyEnabled true
            }

            zipAlignEnabled true
            if (project.hasProperty("enable-shrinkresource")) {
                shrinkResources true
            }
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            buildConfigField "boolean", "IS_PREINSTALL", isPreInstall()
            buildConfigField "String", "PREINSTALL_NAME", "\"${getDynamicProperty("preInstallName")}\""
            buildConfigField "String", "PREINSTALL_DESC", "\"${getDynamicProperty("preInstallDesc")}\""
            buildConfigField "String", "PREINSTALL_SITE", "\"${getDynamicProperty("preInstallSite")}\""
            buildConfigField "boolean", "ENABLE_DEBUG_TRACE", isDebugTraceEnabled()
            buildConfigField "String", "DEBUG_TRACE_NAME", "\"${getDynamicProperty("debugTraceName")}\""
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            ext.betaDistributionReleaseNotesFilePath = 'release_notes.txt'
            ext.betaDistributionGroupAliasesFilePath = 'group_beta.txt'
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled = true
        applicationId "com.tokopedia.tkpd"
        versionCode getTkpdVersionCode()
        versionName getTkpdVersionName()
        vectorDrawables.useSupportLibrary = vectorDrawable
        testInstrumentationRunner 'com.tokopedia.tkpd.MyRunner'
        resConfigs "en", "id"
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
        manifestPlaceholders = [firebasePerformanceLogEnabled: isFirebasePerformanceLogEnabled()]
    }

    dexOptions {
        javaMaxHeapSize "8g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    configurations.all {
        resolutionStrategy.force 'androidx.multidex:multidex:2.0.0'
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
        resolutionStrategy.force 'com.squareup.okio:okio:2.2.2'
        resolutionStrategy.force 'com.facebook.soloader:soloader:0.8.0'
    }

    // Specifies 4 flavor dimensions.
    flavorDimensions "tier", "client"

    productFlavors {
        live {
            dimension "tier"
        }
        staging {
            dimension "tier"
        }
        dev {
            dimension "client"
        }
        prod {
            dimension "client"
        }
    }

    // put Dynamic Feature Modules in dynamic-feature-customerapp.cfg
    // to disable dynamic feature, use command option -Pdisable-dynamic-feature
    if (!project.hasProperty("enable-shrinkresource")) {
        dynamicFeatures = getDynamicFeatureIfEnabled(project)
        generateAssetFile(project, dynamicFeatures)
    }
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(rootProject.ext.features.customer_mid_app)
    implementation project(rootProject.ext.libraries.coreNetwork)
    implementation rootProject.ext.tkpdInternalLibDependencies.globalconfig
    implementation project(rootProject.ext.libraries.deviceInfo)
    implementation project(rootProject.ext.features.navigation)
    implementation project(rootProject.ext.libraries.utils)

}


apply from: "../buildconfig/reactnative/react.gradle"
apply from: "../buildconfig/reactnative/codepush.gradle"
apply plugin: 'com.google.gms.google-services'
