apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'android-apt'
apply plugin: 'io.fabric'
apply from: "../buildconfig/reactnative/react.gradle"
apply from: "../buildconfig/reactnative/codepush.gradle"


def getDpiId(String density) {

    def DPI_ID = ['null': 0, 'mdpi': 1, 'hdpi': 2, 'xhdpi': 3, 'xxhdpi': 4]
    if (density != null)
        return DPI_ID.get(density);
    return 0;
}

def getAbiId(String abi) {

    def ABI_ID = ['null': 0, 'armeabi-v7a': 10, 'x86': 20]
    if (abi != null)
        return ABI_ID.get(abi);
    return 0;
}

def generateBuildId(String density, String abi) {
    return getAbiId(abi) + getDpiId(density);
}

def getAPKArchiveFolder(variant) {
    return "/Android/launching-android/" + "V" + variant.mergedFlavor.versionCode;
}

def allowSplit() {
    return gradle.startParameter.taskNames.contains("assembleRelease") &&
            !project.hasProperty('tkpdBuildType');
}

def allowDistribution() {
    if (project.hasProperty('tkpdBuildType') && tkpdBuildType == "hockeyapp") {
        return "true";
    }
    return "false";
}

def getTkpdVersionCode() {
    return project.hasProperty('versionCode') ? Integer.parseInt(versionCode) : project.defaultVersionCode;
}

def getTkpdVersionName() {
    return project.hasProperty('versionName') ? versionName : project.defaultVersionName;
}

def renameAPKFile(variant, density, versionCode) {

    def fileName = variant.name.toUpperCase()
    fileName += "-" + variant.mergedFlavor.versionName;
    fileName += "-V" + versionCode;
    fileName += "-" + density;
    fileName += ".apk";
    return fileName;
}

def archiveAPK(variant, output) {

    String density = output.getFilter(com.android.build.OutputFile.DENSITY);
    def originZipAlignedApkFile = output.outputFile;
    def renameAPKFile = renameAPKFile(variant, density, output.versionCodeOverride);
    copy {
        from "$originZipAlignedApkFile"
        into getAPKArchiveFolder(variant)
        rename("$originZipAlignedApkFile.name", "$renameAPKFile")
    }
}

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}


android {

    project.ext {
        defaultVersionCode = 218001101;
        defaultVersionName = "2.18";
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion '25'
    useLibrary 'org.apache.http.legacy'
    sourceSets {

        packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/rxjava.properties'
        }

        main {
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['assets', 'src/main/assets', 'src/main/assets/']
        }

        instrumentTest.setRoot('tests')
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            zipAlignEnabled false
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            proguardFiles  'proguard-rules.txt'
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            proguardFiles  'proguard-rules.txt'
            ext.betaDistributionReleaseNotesFilePath = 'release_notes.txt'
            ext.betaDistributionGroupAliasesFilePath = 'group_beta.txt'
            if (allowSplit()) {
                applicationVariants.all { variant ->
                    variant.outputs.each { output ->
                        String density = output.getFilter(com.android.build.OutputFile.DENSITY);
                        String abi = output.getFilter(com.android.build.OutputFile.ABI);
                        output.versionCodeOverride = (getTkpdVersionCode() * 100) + generateBuildId(density, abi);
                    }
                    variant.assemble.doLast {
                        variant.outputs.each { output ->
                            if (output.zipAlign) {
                                archiveAPK(variant, output);
                            }
                        }
                    }
                }
            } else {
                applicationVariants.all { variant ->
                    variant.outputs.each { output ->
                        output.versionCodeOverride = (getTkpdVersionCode() * 100);
                    }
                }
            }
        }
    }

    splits {
        density {
            enable allowSplit()
            reset()
            include "mdpi", "hdpi", "xhdpi", "xxhdpi"
            compatibleScreens 'small', 'normal', 'large', 'xlarge'
        }
        abi {
            enable allowSplit()
            reset()
            include "armeabi-v7a", "x86"
            universalApk false
        }

    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled = true
        applicationId "com.tokopedia.tkpd"
        versionCode getTkpdVersionCode()
        versionName getTkpdVersionName()
        vectorDrawables.useSupportLibrary = true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        packagingOptions {
            exclude "lib/arm64-v8a/libgnustl_shared.so"
        }
    }


    dexOptions {
        javaMaxHeapSize "8g"
        keepRuntimeAnnotatedClasses false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
        resolutionStrategy.force 'com.squareup.okio:okio:1.11.0'
    }

    productFlavors {
        staging {

        }

        live {

        }
    }

    variantFilter { variant ->

        if(variant.buildType.name.equals('release') && variant.getFlavors().get(0).name.equals('staging')) {
            variant.setIgnore(true);
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

//    compile(rootProject.ext.tkpdDependencies.inbox) {
//        exclude group: 'com.tokopedia.core'
//    }
//    compile(rootProject.ext.tkpdDependencies.discovery) {
//        exclude group: 'com.tokopedia.core'
//    }
//    compile(rootProject.ext.tkpdDependencies.transaction) {
//        exclude group: 'com.tokopedia.core'
//    }
//    compile(rootProject.ext.tkpdDependencies.seller) {
//        exclude group: 'com.tokopedia.core'
//    }
//    compile(rootProject.ext.tkpdDependencies.session) {
//        exclude group: 'com.tokopedia.core'
//    }
//    compile(rootProject.ext.tkpdDependencies.tkpdpdp) {
//        exclude group: 'com.tokopedia.core'
//    }
//    compile(rootProject.ext.tkpdDependencies.feed) {
//        exclude group: 'com.tokopedia.core'
//    }
//    compile(rootProject.ext.tkpdDependencies.ride) {
//        exclude group: 'com.tokopedia.core'
//    }
//    compile(rootProject.ext.tkpdDependencies.digital) {
//        exclude group: 'com.tokopedia.core'
//    }
//    compile(rootProject.ext.tkpdDependencies.reactNative) {
//        exclude group: 'com.tokopedia.core'
//    }
//    compile (rootProject.ext.tkpdDependencies.core)
    compile project(':tkpdcore')
    compile project(':tkpddiscovery')
    compile project(':tkpdtransaction')
    compile project(':tkpdseller')
    compile project(':tkpdsession')
    compile project(':tkpdinbox')
    compile project(':tkpdride')
    compile project(':tkpddigital')
    compile project(':tkpdpdp')
    compile project(':tkpdfeed')
    compile project(':tkpdreactnative')
    compile project(':tkpdevents')
    compile project(':tkpdloyalty')
    compile project(':tkpdreputation')
    compile project(':tkpdtokocash')
    compile project(':tkpdflight')
    compile project(':tkpdhome')

    androidTestCompile(rootProject.ext.testDependencies.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile rootProject.ext.testDependencies.mockitorCore
    testCompile 'junit:junit:4.12'

    compile rootProject.ext.permissionDispatcherDependencies.permissionDispatcher
    apt rootProject.ext.permissionDispatcherDependencies.permissionDispatcherProcessor

    compile rootProject.ext.deeplinkDispatchDependencies.deeplinkDispatch
    apt rootProject.ext.deeplinkDispatchDependencies.deeplinkDispatchProcessor

    provided rootProject.ext.miscDependencies.javaxAnnotation
    compile rootProject.ext.miscDependencies.dagger
    apt rootProject.ext.miscDependencies.daggerCompiler

    compile 'com.android.support:multidex:1.0.1'

    compile(rootProject.ext.miscDependencies.trueCaller) {
        exclude group: 'com.android.support'
    }
}
