apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
if (project.hasProperty("enable-shrinkresource")) {
    apply from: "$rootProject.projectDir/buildconfig/appcompile/enable-shrinkresource.gradle"
}
apply plugin: 'com.google.firebase.firebase-perf'

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

apply plugin: 'io.hansel.preprocessor'

apply from: '../tools/dynamic_feature_inclusion.gradle'
apply from: '../tools/set_debug_tools.gradle'

def isProduction() {
    return project.hasProperty('tkpdBuildType') && tkpdBuildType == "production";
}

def allowDistribution() {
    if (project.hasProperty('tkpdBuildType') && tkpdBuildType == "hockeyapp") {
        return "true";
    }
    return "false";
}

def isPreInstall() {
    if (project.hasProperty('isPreInstall') && isPreInstall == "true") {
        return "true"
    }
    return "false"
}

def getDynamicProperty(param) {
    if (project.hasProperty(param)) {
        return project.property(param)
    }
    return ""
}

def allowProguard() {
    return project.hasProperty('tkpdBuildType')
}

def devMode() {
    return !project.hasProperty('tkpdBuildType')
}

def getTkpdVersionCode() {
    return project.hasProperty('versionCode') ? Integer.parseInt(versionCode) : project.defaultVersionCode;
}

def getTkpdVersionName() {
    return project.hasProperty('versionName') ? versionName : project.defaultVersionName;
}

def isFirebasePerformanceLogEnabled() {
    if (project.hasProperty('firebasePerformanceLogEnabled') && firebasePerformanceLogEnabled == "true") {
        return "true"
    }
    return "false"
}

project.ext {
    defaultVersionCode = 417001101;
    defaultVersionName = "3.70";
    react = [
            nodeExecutableAndArgs: ["${nodeExecutableAndArgs}"],
            enableHermes         : true,
    ]
}

//def hermesPath = "../hermes/";
def jscFlavor = 'org.webkit:android-jsc:+'
def enableHermes = project.ext.react.get("enableHermes", false);

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        mavenCentral()
        jcenter()
        maven { url 'https://hansel.io/maven' }
        maven {
            url 'https://jitpack.io'
        }
    }
    dependencies {
        classpath rootProject.ext.gradlePlugin.crashlytics
        classpath rootProject.ext.miscDependencies.hansel
    }
}


android {

    packagingOptions {
        exclude 'META-INF/**'
        pickFirst '**/armeabi-v7a/libc++_shared.so'
        pickFirst '**/x86/libc++_shared.so'
        pickFirst '**/arm64-v8a/libc++_shared.so'
        pickFirst '**/x86_64/libc++_shared.so'
        pickFirst '**/x86/libjsc.so'
        pickFirst '**/armeabi-v7a/libjsc.so'
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    useLibrary 'org.apache.http.legacy'
    sourceSets {

        main {
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['assets', 'src/main/assets', 'src/main/assets/']
            jniLibs.srcDirs = ["jniLibs"]
        }

        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
    }

    buildTypes {
        debug {
            defaultConfig.minSdkVersion project.property("minSdkVersionDebug")
            signingConfig signingConfigs.debug
            minifyEnabled false
            zipAlignEnabled false
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            proguardFiles 'proguard-rules.txt'
            buildConfigField "boolean", "IS_PREINSTALL", "false"
            buildConfigField "String", "PREINSTALL_NAME", "\"\""
            buildConfigField "String", "PREINSTALL_DESC", "\"\""
            buildConfigField "String", "PREINSTALL_SITE", "\"\""
            ext.enableHansel = project.hasProperty('hanselEnableDebug')
            ext.enableCrashlytics = false
            FirebasePerformance {
                // Set this flag to 'false' to disable @AddTrace annotation processing and
                // automatic HTTP/S network request monitoring
                // for a specific build variant at compile time.
                instrumentationEnabled project.property("firebasePerformanceDebug").toBoolean()
            }
        }
        release {
            if (devMode()) {
                signingConfig signingConfigs.debug
            }
            debuggable = isDebugable(project).toBoolean()
            ext.enableHansel = !project.hasProperty('hanselDisableRelease')

            if (isFirebasePerformanceLogEnabled().toBoolean()) {
                minifyEnabled false
            } else {
                minifyEnabled true
            }

            zipAlignEnabled true
            if (project.hasProperty("enable-shrinkresource")) {
                shrinkResources true
            }
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            buildConfigField "boolean", "IS_PREINSTALL", isPreInstall()
            buildConfigField "String", "PREINSTALL_NAME", "\"${getDynamicProperty("preInstallName")}\""
            buildConfigField "String", "PREINSTALL_DESC", "\"${getDynamicProperty("preInstallDesc")}\""
            buildConfigField "String", "PREINSTALL_SITE", "\"${getDynamicProperty("preInstallSite")}\""
            multiDexKeepFile file('multidex-config.txt')
            multiDexKeepProguard file('multidex-config.pro')
            if (allowProguard()) {
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            } else {
                proguardFiles 'proguard-rules.txt'
            }
            ext.betaDistributionReleaseNotesFilePath = 'release_notes.txt'
            ext.betaDistributionGroupAliasesFilePath = 'group_beta.txt'
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled = true
        applicationId "com.tokopedia.tkpd"
        versionCode getTkpdVersionCode()
        versionName getTkpdVersionName()
        vectorDrawables.useSupportLibrary = vectorDrawable
        testInstrumentationRunner 'com.tokopedia.tkpd.MyRunner'
        resConfigs "en", "id"
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
        manifestPlaceholders = [firebasePerformanceLogEnabled: isFirebasePerformanceLogEnabled()]
    }

    dexOptions {
        javaMaxHeapSize "8g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    configurations.all {
        resolutionStrategy.force 'androidx.multidex:multidex:2.0.0'
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
        resolutionStrategy.force 'com.squareup.okio:okio:2.2.2'
        resolutionStrategy.force 'com.facebook.soloader:soloader:0.8.0'
    }

    // Specifies 4 flavor dimensions.
    flavorDimensions "tier", "client"

    productFlavors {
        live {
            dimension "tier"
        }
        staging {
            dimension "tier"
        }
        dev {
            dimension "client"
        }
        prod {
            dimension "client"
        }
    }

    // put Dynamic Feature Modules in dynamic-feature-customerapp.cfg
    // to disable dynamic feature, use command option -Pdisable-dynamic-feature
    if (!project.hasProperty("enable-shrinkresource")) {
        dynamicFeatures = getDynamicFeatureIfEnabled(project)
        generateAssetFile(project, dynamicFeatures)
    }
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(rootProject.ext.features.tkpdcore)
    implementation project(rootProject.ext.features.affiliateCommon)
    implementation project(rootProject.ext.features.createpost)
    implementation project(rootProject.ext.features.feed)
    implementation project(rootProject.ext.features.feedComponent)
    implementation project(rootProject.ext.features.kol)
    implementation project(rootProject.ext.features.kolCommon)
    implementation project(rootProject.ext.features.explore)
    implementation project(rootProject.ext.features.interestPick)
    implementation project(rootProject.ext.features.interestPickCommon)
    implementation project(rootProject.ext.features.shopPage)
    implementation project(rootProject.ext.features.goldMerchantResource)
    implementation project(rootProject.ext.features.home)
    implementation project(rootProject.ext.features.vote)
    implementation project(rootProject.ext.features.event)
    implementation project(rootProject.ext.features.eventPDP)
    implementation project(rootProject.ext.features.commonWallet)
    implementation project(rootProject.ext.features.loyalty)
    implementation project(rootProject.ext.features.commonElectronicMoney)
    implementation project(rootProject.ext.features.tkpdsession)
    implementation project(rootProject.ext.features.loyalty)
    implementation project(rootProject.ext.features.flightOrderList)
    implementation project(rootProject.ext.features.travelCountryCode)
    implementation project(rootProject.ext.features.travelPassenger)
    implementation project(rootProject.ext.features.reputation)
    implementation project(rootProject.ext.features.review)
    implementation project(rootProject.ext.features.buyerorder)
    implementation project(rootProject.ext.features.tkpdseller)
    implementation project(rootProject.ext.features.productDetailCommon)
    implementation project(rootProject.ext.features.variantCommon)
    implementation project(rootProject.ext.features.productDetail)
    implementation project(rootProject.ext.features.payment)
    implementation project(rootProject.ext.features.thankYouNative)
    implementation project(rootProject.ext.features.commonPayment)
    implementation project(rootProject.ext.features.homeRecom)
    implementation project(rootProject.ext.features.recommendationWidgetCommon)
    implementation project(rootProject.ext.features.topAdsSdk)
    implementation project(rootProject.ext.features.reputationCommon)
    implementation project(rootProject.ext.features.commonTopupBills)
    implementation project(rootProject.ext.features.otp)
    implementation project(rootProject.ext.features.logout)
    implementation project(rootProject.ext.features.topAdsManagementCommon)
    implementation project(rootProject.ext.features.goldMerchantCommon)
    implementation project(rootProject.ext.features.homecredit)
    implementation project(rootProject.ext.features.topAdsManagementSourceTagging)
    implementation project(rootProject.ext.features.atc_common)
    implementation project(rootProject.ext.features.fcm_common)
    implementation project(rootProject.ext.features.discovery2)
    implementation project(rootProject.ext.features.purchase_platform_common)
    implementation project(rootProject.ext.features.cart)
    implementation project(rootProject.ext.features.logisticcart)
    implementation project(rootProject.ext.features.logisticdata)
    implementation project(rootProject.ext.features.logisticaddaddress)
    implementation project(rootProject.ext.features.chatcommon)
    implementation project(rootProject.ext.features.nps)
    implementation project(rootProject.ext.features.developerOptions)
    implementation project(rootProject.ext.features.qrscanner)
    implementation project(rootProject.ext.features.withdraw)
    implementation project(rootProject.ext.features.wishlistCommon)
    implementation project(rootProject.ext.features.productCard)
    implementation project(rootProject.ext.features.broadcastMessageCommon)
    implementation project(rootProject.ext.features.digitalBrowse)
    implementation project(rootProject.ext.features.commonTravel)
    implementation project(rootProject.ext.features.searchbar)
    implementation project(rootProject.ext.features.navigation)
    implementation project(rootProject.ext.features.navigationCommon)
    implementation project(rootProject.ext.features.accountHome)
    implementation project(rootProject.ext.features.updateinactivephone)
    implementation project(rootProject.ext.features.phoneVerification)
    implementation project(rootProject.ext.features.attachproduct)
    implementation project(rootProject.ext.features.basemvvm)
    implementation project(rootProject.ext.features.loginregister)
    implementation project(rootProject.ext.features.loginphone)
    implementation project(rootProject.ext.features.sessioncommon)
    implementation project(rootProject.ext.features.commonDigital)
    implementation project(rootProject.ext.features.pms)
    implementation project(rootProject.ext.features.recentview)
    implementation project(rootProject.ext.features.promoCheckout)
    implementation project(rootProject.ext.features.loyaltyCommon)
    implementation project(rootProject.ext.features.promoCheckoutCommon)
    implementation project(rootProject.ext.features.userIdentification)
    implementation project(rootProject.ext.features.userIdentificationCommon)
    implementation project(rootProject.ext.features.gallery)
    implementation project(rootProject.ext.features.categoryCommon)
    implementation project(rootProject.ext.features.campaignShakeLanding)
    implementation project(rootProject.ext.features.officialStore)
    implementation project(rootProject.ext.features.brandlist)
    implementation project(rootProject.ext.features.playCommon)
    implementation rootProject.ext.tkpdInternalLibDependencies.betaNotif
    implementation rootProject.ext.tkpdInternalLibDependencies.akamaiBMP
    implementation project(rootProject.ext.libraries.iris)
    implementation project(rootProject.ext.libraries.irisSession)
    implementation project(rootProject.ext.libraries.pushNotification)
    implementation project(rootProject.ext.libraries.applink)
    implementation project(rootProject.ext.libraries.reactNative)
    implementation project(rootProject.ext.libraries.tkpdabstraction)
    implementation project(rootProject.ext.libraries.baseList)
    implementation project(rootProject.ext.libraries.tkpddesign)
    implementation project(rootProject.ext.libraries.dynamicFeatures)
    implementation project(rootProject.ext.libraries.oms)
    implementation project(rootProject.ext.libraries.fingerprint)
    implementation project(rootProject.ext.libraries.imageuploader)
    implementation project(rootProject.ext.libraries.imagePicker)
    implementation project(rootProject.ext.libraries.videoRecorder)
    implementation project(rootProject.ext.libraries.travelCalendar)
    implementation project(rootProject.ext.libraries.datePickerRange)
    implementation project(rootProject.ext.libraries.commonNetwork)
    implementation project(rootProject.ext.libraries.baseListSeller)
    implementation project(rootProject.ext.libraries.remoteConfig)
    implementation project(rootProject.ext.libraries.core_legacy)
    implementation project(rootProject.ext.libraries.coreNetwork)
    implementation project(rootProject.ext.libraries.trackingOptimizer)
    implementation project(rootProject.ext.libraries.locationmanager)
    implementation project(rootProject.ext.libraries.permissionchecker)
    implementation project(rootProject.ext.libraries.kotlinExtensions)
    implementation project(rootProject.ext.libraries.imagePreviewSlider)
    implementation project(rootProject.ext.features.shopCommon)
    implementation project(rootProject.ext.features.merchantVoucher)
    implementation project(rootProject.ext.features.navigationCommon)
    implementation project(rootProject.ext.libraries.analytics)
    if (rootProject.ext.debugToolsEnabled) {
        implementation project(rootProject.ext.libraries.analyticsDebugger)
    } else {
        implementation project(rootProject.ext.libraries.analyticsDebuggerNoop)
    }
    implementation project(rootProject.ext.libraries.linker)
    implementation project(rootProject.ext.libraries.weaver)
    implementation project(rootProject.ext.features.common_promo)
    implementation project(rootProject.ext.libraries.cmPushNotifications)
    implementation project(rootProject.ext.libraries.track)
    implementation project(rootProject.ext.libraries.bannerDynamic)
    implementation project(rootProject.ext.features.kyc)
    implementation project(rootProject.ext.libraries.webview)
    implementation project(rootProject.ext.libraries.logger)
    implementation project(rootProject.ext.features.filter)
    implementation project(rootProject.ext.features.commonTradein)
    implementation project(rootProject.ext.features.categoryLevels)
    implementation project(rootProject.ext.features.hotlist)
    implementation project(rootProject.ext.libraries.inappupdate)
    implementation project(rootProject.ext.libraries.youtubeutil)
    implementation project(rootProject.ext.features.tokopointsNotification)
    implementation project(rootProject.ext.libraries.collapsingTabLayout)
    implementation project(rootProject.ext.libraries.videoplayer)
    implementation project(rootProject.ext.libraries.websocket)
    implementation project(rootProject.ext.libraries.baseAdapter)
    implementation project(rootProject.ext.features.csat_rating)
    implementation project(rootProject.ext.features.resourcesCommon)
    implementation project(rootProject.ext.features.agerestriction)

    implementation project(rootProject.ext.features.promotionsTarget)
    implementation project(rootProject.ext.features.findNative)
    implementation project(rootProject.ext.features.promoGamificationCommon)
    implementation project(rootProject.ext.libraries.shakeDetect)
    if (rootProject.ext.debugToolsEnabled) {
        implementation project(rootProject.ext.libraries.preReleaseInspector)
    } else {
        implementation project(rootProject.ext.libraries.preReleaseInspectorNoop)
    }
    implementation project(rootProject.ext.features.atc_variant)
    implementation project(rootProject.ext.libraries.deviceInfo)
    implementation rootProject.ext.unifyDependencies.principles
    implementation rootProject.ext.unifyDependencies.components
    implementation rootProject.ext.unifyDependencies.global_error
    implementation rootProject.ext.unifyDependencies.coach_mark
    implementation rootProject.ext.unifyDependencies.banner
    implementation rootProject.ext.unifyDependencies.datepicker
    implementation rootProject.ext.unifyDependencies.header
    implementation rootProject.ext.unifyDependencies.iconNotification
    implementation rootProject.ext.unifyDependencies.sortFilter
    implementation rootProject.ext.unifyDependencies.pin
    implementation rootProject.ext.tkpdInternalLibDependencies.cacheapi
    implementation rootProject.ext.tkpdInternalLibDependencies.cachemanager
    implementation project(rootProject.ext.libraries.graphql)
    implementation rootProject.ext.tkpdInternalLibDependencies.usersession
    implementation rootProject.ext.tkpdInternalLibDependencies.usecase
    implementation rootProject.ext.tkpdInternalLibDependencies.network
    implementation rootProject.ext.tkpdInternalLibDependencies.globalconfig
    implementation rootProject.ext.tkpdInternalLibDependencies.url
    implementation project(rootProject.ext.libraries.akamaiBotLib)
    implementation rootProject.ext.tkpdInternalLibDependencies.williamchart

    if (rootProject.ext.debugToolsEnabled) {
        implementation rootProject.ext.tkpdInternalLibDependencies.fakeresponse
    } else {
        implementation rootProject.ext.tkpdInternalLibDependencies.fakeresponseNoOp
    }

    implementation rootProject.ext.playServicesDependencies.maps
    implementation project(rootProject.ext.libraries.playCore)
    implementation rootProject.ext.playServicesDependencies.auth
    implementation rootProject.ext.supportLibDependencies.kotlinSupport
    implementation rootProject.ext.supportLibDependencies.kotlinSupportJdk7
    implementation rootProject.ext.supportLibDependencies.supportV13
    implementation rootProject.ext.tkpdLibDependencies.youtubePlayer
    implementation rootProject.ext.serviceDependencies.anrWatchDogs
    implementation rootProject.ext.miscDependencies.lottie
    implementation project(rootProject.ext.features.recharge_slice)
    implementation project(rootProject.ext.features.install_referral)

    implementation rootProject.ext.firebase.config
    implementation rootProject.ext.firebase.messaging
    implementation rootProject.ext.playServicesDependencies.analytics
    implementation rootProject.ext.firebase.fireStore
    implementation rootProject.ext.playServicesDependencies.location
    implementation rootProject.ext.debugToolsDependencies.chuck
    implementation rootProject.ext.supportLibDependencies.design
    implementation rootProject.ext.supportLibDependencies.cardViewV7
    implementation rootProject.ext.networkDependencies.retrofit
    implementation rootProject.ext.networkDependencies.converterGson
    implementation rootProject.ext.networkDependencies.adapterRxJava
    implementation rootProject.ext.networkDependencies.okHttp
    implementation rootProject.ext.networkDependencies.loggingInterceptor
    implementation rootProject.ext.networkDependencies.glide
    implementation rootProject.ext.analyticsDependencies.appsflyer
    implementation(rootProject.ext.analyticsDependencies.moengage)
    implementation rootProject.ext.supportLibDependencies.constraintLayout
    implementation rootProject.ext.miscDependencies.loaderviewlibrary
    implementation rootProject.ext.miscDependencies.roundCornerProgressBar
    implementation rootProject.ext.miscDependencies.apacheLang
    implementation project(rootProject.ext.libraries.remoteResourceRequest)
    implementation(rootProject.ext.miscDependencies.flexBoxLayout) {
        exclude group: 'com.android.support'
    }
    implementation(rootProject.ext.miscDependencies.ucrop) {
        exclude group: 'com.android.support'
    }
    implementation(rootProject.ext.miscDependencies.imagecropper) {
        exclude group: "com.android.support"
    }
    implementation rootProject.ext.miscDependencies.exoPlayerCore
    implementation rootProject.ext.miscDependencies.exoPlayerUi
    implementation rootProject.ext.miscDependencies.exoPlayerRtmp

    implementation rootProject.ext.firebase.appIndexing
    implementation(rootProject.ext.tkpdLibDependencies.expandableOption) {
        exclude group: "com.android.support"
    }
    implementation(rootProject.ext.tkpdLibDependencies.showcase) {
        exclude group: "com.android.support"
    }
    implementation(rootProject.ext.serviceDependencies.crashlytics) {
        transitive = true
    }
    implementation(rootProject.ext.analyticsDependencies.branch) {
        exclude module: 'answers-shim'
    }
    implementation rootProject.ext.supportLibDependencies.preferenceV7
    implementation rootProject.ext.miscDependencies.lifeCycleExtentions
    implementation rootProject.ext.miscDependencies.codePushReactNative
    implementation rootProject.ext.miscDependencies.reactNative
    implementation 'com.facebook.fresco:fresco:1.10.0'
    implementation 'com.facebook.fresco:imagepipeline-okhttp3:1.10.0'
    implementation rootProject.ext.dbDependencies.dbRoomRuntime
    annotationProcessor rootProject.ext.dbDependencies.dbRoomCompiler
    implementation rootProject.ext.miscDependencies.coroutineCore
    implementation rootProject.ext.miscDependencies.coroutineAndroid
    implementation rootProject.ext.miscDependencies.chips
    implementation rootProject.ext.miscDependencies.gson
    implementation rootProject.ext.miscDependencies.reactNative
    implementation rootProject.ext.miscDependencies.parcelerApi
    annotationProcessor rootProject.ext.miscDependencies.parceler
    implementation rootProject.ext.miscDependencies.rxAndroid
    implementation rootProject.ext.miscDependencies.rxJava
    compileOnly rootProject.ext.miscDependencies.javaxAnnotation
    implementation rootProject.ext.miscDependencies.dagger
    annotationProcessor rootProject.ext.miscDependencies.daggerCompiler
    implementation rootProject.ext.miscDependencies.multiDex
    implementation rootProject.ext.deeplinkDispatchDependencies.deeplinkDispatch
    annotationProcessor rootProject.ext.deeplinkDispatchDependencies.deeplinkDispatchProcessor
    implementation(rootProject.ext.miscDependencies.facebook) {
        exclude group: 'com.android.support'
    }
    implementation 'com.facebook.soloader:soloader:0.8.0'
    implementation 'com.facebook.infer.annotation:infer-annotation:0.11.2'
    implementation(rootProject.ext.debugToolsDependencies.timber) {
        exclude group: 'org.jetbrains', module: 'annotations'
    }
    if (rootProject.ext.debugToolsEnabled) {
        implementation project(project.ext.debugToolsDependencies.blockCanary)
    } else {
        implementation project.ext.debugToolsDependencies.blockCanaryNoOp
    }
    debugImplementation project.ext.debugToolsDependencies.leakCanary

    //[START] test and androidTest dependencies
    androidTestImplementation(rootProject.ext.testDependencies.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation rootProject.ext.testDependencies.junit
    testImplementation rootProject.ext.testDependencies.mockitorCore
    testImplementation rootProject.ext.miscDependencies.rxJava
    androidTestImplementation rootProject.ext.miscDependencies.rxJava
    androidTestImplementation rootProject.ext.testDependencies.uiautomator
    androidTestImplementation rootProject.ext.testDependencies.spoon
    androidTestImplementation rootProject.ext.testDependencies.androidAnnotation
    androidTestImplementation(rootProject.ext.testDependencies.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation(rootProject.ext.testDependencies.androidTestRunner) {
        exclude module: 'support-annotations'
    }
    androidTestImplementation(rootProject.ext.testDependencies.androidRulesVersion) {
        exclude module: 'support-annotations'
    }
    androidTestImplementation(rootProject.ext.testDependencies.espressoIntents) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(rootProject.ext.testDependencies.espressoContrib, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation rootProject.ext.testDependencies.retrofitMock
    androidTestImplementation rootProject.ext.testDependencies.retrofitMockWebser
    androidTestAnnotationProcessor rootProject.ext.miscDependencies.daggerCompiler
    androidTestImplementation rootProject.ext.miscDependencies.dagger
    androidTestImplementation rootProject.ext.miscDependencies.gson
    androidTestImplementation rootProject.ext.miscDependencies.parcelerApi
    androidTestAnnotationProcessor rootProject.ext.miscDependencies.parceler
    androidTestImplementation rootProject.ext.testDependencies.dexMaker
    androidTestImplementation(rootProject.ext.testDependencies.dexMakerMockito) {
        exclude group: 'org.hamcrest', module: 'hamcrest-core, mockito-core'
        exclude group: 'org.mockito'
    }
    // Cloud testing
    androidTestImplementation(name: 'cloudtestingscreenshotter_lib', ext: 'aar')
    androidTestImplementation(rootProject.ext.miscDependencies.facebook) {
        exclude group: 'com.android.support'
    }
    androidTestImplementation rootProject.ext.supportLibDependencies.appCompactV7
    androidTestImplementation rootProject.ext.supportLibDependencies.cardViewV7


    if (enableHermes) {
        debugImplementation 'com.facebook.hermes:hermes-debug:0.1.2@aar'
        releaseImplementation 'com.facebook.hermes:hermes-release:0.1.2@aar'
    } else {
        implementation jscFlavor
    }
}


apply from: "../buildconfig/reactnative/react.gradle"
apply from: "../buildconfig/reactnative/codepush.gradle"
