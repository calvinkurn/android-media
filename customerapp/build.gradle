apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'android-apt'
apply plugin: 'io.fabric'
apply plugin: 'io.hansel.preprocessor'


def getDpiId(String density) {

    def DPI_ID = ['null': 0, 'mdpi': 1, 'hdpi': 2, 'xhdpi': 3, 'xxhdpi': 4]
    if (density != null)
        return DPI_ID.get(density);
    return 0;
}

def getAbiId(String abi) {

    def ABI_ID = ['null': 0, 'armeabi-v7a': 10, 'x86': 20]
    if (abi != null)
        return ABI_ID.get(abi);
    return 0;
}

def generateBuildId(String density, String abi) {
    return getAbiId(abi) + getDpiId(density);
}

def getAPKArchiveFolder(variant) {
    return "/Android/launching-android/" + "V" + variant.mergedFlavor.versionCode;
}

def allowSplit() {
    return gradle.startParameter.taskNames.contains("assembleLiveRelease") &&
            (project.hasProperty('tkpdBuildType') && tkpdBuildType == "production");
}

def allowDistribution() {
    if (project.hasProperty('tkpdBuildType') && tkpdBuildType == "hockeyapp") {
        return "true";
    }
    return "false";
}

def allowProguard() {
    return project.hasProperty('tkpdBuildType')
}

def getTkpdVersionCode() {
    return project.hasProperty('versionCode') ? Integer.parseInt(versionCode) : project.defaultVersionCode;
}

def getTkpdVersionName() {
    return project.hasProperty('versionName') ? versionName : project.defaultVersionName;
}

def renameAPKFile(variant, density, versionCode) {

    def fileName = variant.name.toUpperCase()
    fileName += "-" + variant.mergedFlavor.versionName;
    fileName += "-V" + versionCode;
    fileName += "-" + density;
    fileName += ".apk";
    return fileName;
}

def archiveAPK(variant, output) {

    String density = output.getFilter(com.android.build.OutputFile.DENSITY);
    def originZipAlignedApkFile = output.outputFile;
    def renameAPKFile = renameAPKFile(variant, density, output.versionCodeOverride);
    copy {
        from "$originZipAlignedApkFile"
        into getAPKArchiveFolder(variant)
        rename("$originZipAlignedApkFile.name", "$renameAPKFile")
    }
}

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        mavenCentral()
        jcenter()
        maven { url 'https://hansel.io/maven' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'io.hansel.preprocessor:preprocessor:6.0.1'
    }
}


android {

    project.ext {
        defaultVersionCode = 221001101;
        defaultVersionName = "2.21";
        react = [
                nodeExecutableAndArgs: ["${nodeExecutableAndArgs}"]
        ]
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    useLibrary 'org.apache.http.legacy'
    sourceSets {

        packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/rxjava.properties'
        }

        main {
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['assets', 'src/main/assets', 'src/main/assets/']
        }

        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            zipAlignEnabled false
            testCoverageEnabled true
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            proguardFiles  'proguard-rules.txt'
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            if (allowProguard()) {
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            } else {
                proguardFiles 'proguard-rules.txt'
            }
            ext.betaDistributionReleaseNotesFilePath = 'release_notes.txt'
            ext.betaDistributionGroupAliasesFilePath = 'group_beta.txt'
            if (allowSplit()) {
                applicationVariants.all { variant ->
                    variant.outputs.each { output ->
                        String density = output.getFilter(com.android.build.OutputFile.DENSITY);
                        String abi = output.getFilter(com.android.build.OutputFile.ABI);
                        output.versionCodeOverride = (getTkpdVersionCode() * 100) + generateBuildId(density, abi);
                    }
                    variant.assemble.doLast {
                        variant.outputs.each { output ->
                            if (output.zipAlign) {
                                archiveAPK(variant, output);
                            }
                        }
                    }
                }
            } else {
                applicationVariants.all { variant ->
                    variant.outputs.each { output ->
                        output.versionCodeOverride = (getTkpdVersionCode() * 100);
                    }
                }
            }
        }
    }

    splits {
        density {
            enable allowSplit()
            reset()
            include "mdpi", "hdpi", "xhdpi", "xxhdpi"
            compatibleScreens 'small', 'normal', 'large', 'xlarge'
        }
        abi {
            enable allowSplit()
            reset()
            include "armeabi-v7a", "x86"
            universalApk false
        }

    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled = true
        applicationId "com.tokopedia.tkpd"
        versionCode getTkpdVersionCode()
        versionName getTkpdVersionName()
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner 'com.tokopedia.tkpd.MyRunner'
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        packagingOptions {
            exclude "lib/arm64-v8a/libgnustl_shared.so"
        }
    }


    dexOptions {
        javaMaxHeapSize "4g"
        keepRuntimeAnnotatedClasses false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    configurations.all {
        resolutionStrategy.force 'com.android.support:multidex:1.0.3'
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
        resolutionStrategy.force 'com.squareup.okio:okio:1.11.0'
    }

    productFlavors {
        live {

        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile project(rootProject.ext.features.core)
    compile project(rootProject.ext.features.discovery)
    compile project(rootProject.ext.features.transaction)
    compile project(rootProject.ext.features.seller)
    compile project(rootProject.ext.features.session)
    compile project(rootProject.ext.features.inbox)
    compile project(rootProject.ext.features.ride)
    compile project(rootProject.ext.features.digital)
    compile project(rootProject.ext.features.productDetail)
    compile project(rootProject.ext.features.feed)
    compile project(rootProject.ext.features.event)
    compile project(rootProject.ext.features.loyalty)
    compile project(rootProject.ext.features.reputation)
    compile project(rootProject.ext.features.tokoCash)
    compile project(rootProject.ext.features.flight)
    compile project(rootProject.ext.features.home)
    compile project(rootProject.ext.features.groupchat)
    compile project(rootProject.ext.features.shopPage)
    compile project(rootProject.ext.libraries.reactNative)
    compile project(rootProject.ext.features.kol)
    compile project(rootProject.ext.libraries.pushNotif)
    compile project(rootProject.ext.libraries.applink)
    compile project(rootProject.ext.features.gamification)

    androidTestCompile(rootProject.ext.testDependencies.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile rootProject.ext.testDependencies.mockitorCore
    testCompile rootProject.ext.testDependencies.junit

    compile rootProject.ext.permissionDispatcherDependencies.permissionDispatcher
    apt rootProject.ext.permissionDispatcherDependencies.permissionDispatcherProcessor

    compile rootProject.ext.deeplinkDispatchDependencies.deeplinkDispatch
    apt rootProject.ext.deeplinkDispatchDependencies.deeplinkDispatchProcessor

    provided rootProject.ext.miscDependencies.javaxAnnotation
    compile rootProject.ext.miscDependencies.dagger
    apt rootProject.ext.miscDependencies.daggerCompiler

    compile rootProject.ext.miscDependencies.multiDex

    compile(rootProject.ext.miscDependencies.trueCaller) {
        exclude group: 'com.android.support'
    }

    //[START] test and androidTest dependencies
    testCompile rootProject.ext.testDependencies.junit
    testCompile rootProject.ext.testDependencies.mockitorCore
    testCompile rootProject.ext.miscDependencies.rxJava
    androidTestCompile rootProject.ext.miscDependencies.rxJava
    androidTestCompile rootProject.ext.testDependencies.uiautomator
    androidTestCompile rootProject.ext.testDependencies.spoon
    androidTestCompile rootProject.ext.testDependencies.androidAnnotation
    androidTestCompile(rootProject.ext.testDependencies.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile(rootProject.ext.testDependencies.androidTestRunner) {
        exclude module: 'support-annotations'
    }
    androidTestCompile(rootProject.ext.testDependencies.androidRulesVersion) {
        exclude module: 'support-annotations'
    }
    androidTestCompile(rootProject.ext.testDependencies.espressoIntents) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile rootProject.ext.testDependencies.retrofitMock
    androidTestCompile rootProject.ext.testDependencies.retrofitMockWebser
    androidTestApt rootProject.ext.miscDependencies.daggerCompiler
    androidTestCompile rootProject.ext.miscDependencies.dagger
    androidTestCompile rootProject.ext.miscDependencies.gson
    androidTestCompile rootProject.ext.miscDependencies.parcelerApi
    androidTestApt rootProject.ext.miscDependencies.parceler
    androidTestCompile rootProject.ext.testDependencies.dexMaker
    androidTestCompile(rootProject.ext.testDependencies.dexMakerMockito) {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    // Cloud testing
    androidTestCompile (name:'cloudtestingscreenshotter_lib', ext:'aar')
    //[END] test and androidTest dependencies
}

apply from: "../buildconfig/reactnative/react.gradle"
apply from: "../buildconfig/reactnative/codepush.gradle"
