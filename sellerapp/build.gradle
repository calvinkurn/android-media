apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'io.hansel.preprocessor'

def getDpiId(String density) {

    def DPI_ID = ['null': 0, 'mdpi': 1, 'hdpi': 2, 'xhdpi': 3, 'xxhdpi': 4]
    if (density != null)
        return DPI_ID.get(density);
    return 0;
}

def getAPKArchiveFolder(variant) {
    return "/Android/launching-android/" + "V" + variant.mergedFlavor.versionCode;
}

def allowSplit() {
    return gradle.startParameter.taskNames.contains("assembleLiveProdRelease") &&
            (project.hasProperty('tkpdBuildType') && tkpdBuildType == "productionsplit")
}

def allowDistribution() {
    if (project.hasProperty('tkpdBuildType') && tkpdBuildType == "hockeyapp") {
        return "true";
    }
    return "false";
}

def allowProguard() {
    return project.hasProperty('tkpdBuildType')
}

def getTkpdVersionCode() {
    return project.hasProperty('versionCode') ? Integer.parseInt(versionCode) : project.defaultVersionCode;
}

def getTkpdVersionName() {
    return project.hasProperty('versionName') ? versionName : project.defaultVersionName;
}

def renameAPKFile(variant, density, versionCode) {

    def fileName = variant.name.toUpperCase()
    fileName += "-" + variant.mergedFlavor.versionName;
    fileName += "-V" + versionCode;
    fileName += "-" + density;
    fileName += ".apk";
    return fileName;
}

def archiveAPK(variant, output) {

    String density = output.getFilter(com.android.build.OutputFile.DENSITY);
    def originZipAlignedApkFile = output.outputFile;
    def renameAPKFile = renameAPKFile(variant, density, output.versionCodeOverride);
    copy {
        from "$originZipAlignedApkFile"
        into getAPKArchiveFolder(variant)
        rename("$originZipAlignedApkFile.name", "$renameAPKFile")
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://hansel.io/maven' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
        classpath rootProject.ext.miscDependencies.hansel
    }
}


android {

    project.ext {
        defaultVersionCode = 1000404;
        defaultVersionName = "1.0.4";
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    useLibrary 'org.apache.http.legacy'
    sourceSets {


        main {
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['assets', 'src/main/assets', 'src/main/assets/']
        }

        androidTest.setRoot('tests')
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
    }


    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            zipAlignEnabled false
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            proguardFiles 'proguard-rules.txt'
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            if (allowProguard()) {
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            } else {
                proguardFiles 'proguard-rules.txt'
            }
            ext.betaDistributionReleaseNotesFilePath = 'release_notes.txt'
            ext.betaDistributionGroupAliasesFilePath = 'group_beta.txt'
            if (allowSplit()) {
                applicationVariants.all { variant ->
                    variant.outputs.each { output ->
                        String density = output.getFilter(com.android.build.OutputFile.DENSITY);
                        output.versionCodeOverride = (getTkpdVersionCode() * 100) + getDpiId(density);
                    }
                    variant.assemble.doLast {
                        variant.outputs.each { output ->
                            if (output.zipAlign) {
                                archiveAPK(variant, output);
                            }
                        }
                    }
                }
            } else {
                applicationVariants.all { variant ->
                    variant.outputs.each { output ->
                        output.versionCodeOverride = (getTkpdVersionCode() * 100);
                    }
                }
            }
        }
    }

    splits {
        density {
            enable allowSplit()
            exclude "tvdpi", "xxxhdpi", "ldpi" //Add or modify the supported density here`
            compatibleScreens 'small', 'normal', 'large', 'xlarge' //Discouraged to touch this
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled = true
        applicationId "com.tokopedia.sellerapp"
        versionCode getTkpdVersionCode()
        versionName getTkpdVersionName()
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        packagingOptions {
            exclude "lib/arm64-v8a/libgnustl_shared.so"
        }
    }


    dexOptions {
        javaMaxHeapSize "8g"
        keepRuntimeAnnotatedClasses false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
        resolutionStrategy.force 'com.squareup.okio:okio:1.11.0'
    }

    // Specifies 4 flavor dimensions.
    flavorDimensions "tier", "client"

    productFlavors {
        staging {
            dimension "tier"
        }
        live {
            dimension "tier"
        }
        dev {
            dimension "client"
        }
        prod {
            dimension "client"
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

afterEvaluate {
    dependencies {
        liveDevImplementation rootProject.ext.instabugDependencies.instabug
        stagingDevImplementation rootProject.ext.instabugDependencies.instabug
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(rootProject.ext.libraries.pushNotif)
    implementation project(rootProject.ext.libraries.applink)
    implementation project(rootProject.ext.libraries.cacheApi)
    implementation project(rootProject.ext.libraries.abstraction)
    implementation project(rootProject.ext.libraries.design)
    implementation project(rootProject.ext.libraries.useCase)
    implementation project(rootProject.ext.libraries.imagePicker)
    implementation project(rootProject.ext.libraries.graphql)
    implementation project(rootProject.ext.libraries.datePickerRange)
    implementation project(rootProject.ext.libraries.remoteConfig)
    implementation project(rootProject.ext.libraries.baseListSeller)

    implementation project(rootProject.ext.features.commonDigital)
    implementation project(rootProject.ext.features.core)
    implementation project(rootProject.ext.features.shopPage)
    implementation project(rootProject.ext.features.mitraToppers)
    implementation project(rootProject.ext.features.goldMerchantCommon)
    implementation project(rootProject.ext.features.goldMerchantResource)
    implementation project(rootProject.ext.features.goldMerchant)
    implementation project(rootProject.ext.features.goldMerchantSubscribe)
    implementation project(rootProject.ext.features.topAdsDashboard)
    implementation project(rootProject.ext.features.topAdsManagementCommon)
    implementation project(rootProject.ext.features.topAdsManagement)
    implementation project(rootProject.ext.features.seller)
    implementation project(rootProject.ext.features.session)
    implementation project(rootProject.ext.features.productDetail)
    implementation project(rootProject.ext.features.inbox)
    implementation project(rootProject.ext.features.reputation)
    implementation project(rootProject.ext.features.reputationCommon)
    implementation project(rootProject.ext.features.transaction)
    implementation project(rootProject.ext.features.topAdsSdk)
    implementation project(rootProject.ext.features.payment)
    implementation project(rootProject.ext.features.profile)
    implementation project(rootProject.ext.features.contactUs)
    implementation project(rootProject.ext.features.otp)
    implementation project(rootProject.ext.features.logout)
    implementation project(rootProject.ext.features.userIdentification)
    implementation project(rootProject.ext.features.userIdentificationCommon)
    implementation project(rootProject.ext.features.districtRecommendation)
    implementation project(rootProject.ext.libraries.imageuploader)
    implementation project(rootProject.ext.libraries.imagePicker)
    implementation project(rootProject.ext.features.logisticuploadawb)
    implementation project(rootProject.ext.features.tracking)
    implementation project(rootProject.ext.libraries.network)
    implementation project(rootProject.ext.libraries.config)
    implementation project(rootProject.ext.features.topchat)
    implementation project(rootProject.ext.features.settingbank)
    implementation project(rootProject.ext.features.changepassword)
    implementation project(rootProject.ext.features.attachproduct)
    implementation project(rootProject.ext.features.talk)
    implementation project(rootProject.ext.features.productManageItem)
    implementation project(rootProject.ext.features.productDraftDatabase)
    implementation project(rootProject.ext.features.productManageList)
    implementation project(rootProject.ext.features.broadcastMessage)
    implementation project(rootProject.ext.features.broadcastMessageCommon)
    implementation project(rootProject.ext.features.kol)
    implementation project(rootProject.ext.features.kolCommon)
    implementation project(rootProject.ext.features.merchantVoucher)

    implementation project(rootProject.ext.features.shopCommon)
    implementation project(rootProject.ext.features.commonDigital)
    implementation project(rootProject.ext.features.digitalproduct)
    implementation project(rootProject.ext.features.shopOpen)
    implementation project(rootProject.ext.features.shopSettings)
    implementation project(rootProject.ext.features.withdraw)
    implementation project(rootProject.ext.features.paymentSetting)
    implementation project(rootProject.ext.features.changePhoneNumber)
    implementation project(rootProject.ext.features.phoneVerification)
    implementation project(rootProject.ext.features.updateinactivephone)
    implementation project(rootProject.ext.features.loginregister)
    implementation project(rootProject.ext.features.sessioncommon)
    implementation rootProject.ext.tkpdLibDependencies.youtubePlayer

    implementation(rootProject.ext.debugToolsDependencies.chuck) {
        exclude group: 'com.squareup.okhttp3'
        exclude group: 'com.squareup.okio'
        exclude group: 'com.android.support'
    }

    annotationProcessor rootProject.ext.dbDependencies.dbFlowProcessor
    implementation rootProject.ext.dbDependencies.dbFlowCore
    implementation rootProject.ext.dbDependencies.dbFlow

    implementation(rootProject.ext.analyticsDependencies.moengage) {
        exclude group: 'com.moengage', module: 'moe-push-gcm'
    }

    implementation(rootProject.ext.analyticsDependencies.moengageMSG) {
        exclude group: 'com.android.support'
    }

    implementation rootProject.ext.playServicesDependencies.maps
    implementation rootProject.ext.playServicesDependencies.remoteConfig
    implementation rootProject.ext.playServicesDependencies.firebase

    implementation rootProject.ext.supportLibDependencies.cardViewV7
    implementation rootProject.ext.supportLibDependencies.appCompactV7
    implementation rootProject.ext.supportLibDependencies.design
    implementation rootProject.ext.supportLibDependencies.constraintLayout

    implementation rootProject.ext.networkDependencies.retrofit
    implementation rootProject.ext.networkDependencies.converterGson
    implementation rootProject.ext.networkDependencies.adapterRxJava
    implementation rootProject.ext.networkDependencies.okHttp
    implementation rootProject.ext.networkDependencies.loggingInterceptor

    implementation rootProject.ext.miscDependencies.roundCornerProgressBar
    implementation rootProject.ext.miscDependencies.scannerZxing

    implementation rootProject.ext.miscDependencies.rxAndroid
    implementation rootProject.ext.miscDependencies.rxJava
    implementation rootProject.ext.miscDependencies.rxJavaMath

    implementation project(rootProject.ext.libraries.fingerprint)

    implementation(rootProject.ext.miscDependencies.imagecropper) {
        exclude group: "com.android.support"
    }
    implementation(rootProject.ext.miscDependencies.loaderviewlibrary) {
        exclude group: 'com.android.support'
    }
    compileOnly rootProject.ext.miscDependencies.javaxAnnotation
    implementation rootProject.ext.miscDependencies.dagger
    annotationProcessor rootProject.ext.miscDependencies.daggerCompiler

    implementation(rootProject.ext.tkpdLibDependencies.expandableOption) {
        exclude group: "com.android.support"
    }
    implementation(rootProject.ext.tkpdLibDependencies.showcase) {
        exclude group: "com.android.support"
    }

    implementation rootProject.ext.viewDependencies.appIntro

    implementation('de.hdodenhof:circleimageview:2.1.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    implementation rootProject.ext.butterKnifeDependencies.butterKnife
    annotationProcessor rootProject.ext.butterKnifeDependencies.butterKnifeCompiler

    implementation rootProject.ext.deeplinkDispatchDependencies.deeplinkDispatch
    annotationProcessor rootProject.ext.deeplinkDispatchDependencies.deeplinkDispatchProcessor

    androidTestImplementation(rootProject.ext.testDependencies.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation rootProject.ext.testDependencies.junit
}
