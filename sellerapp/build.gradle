apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'robust'
apply plugin: 'io.hansel.preprocessor'
apply plugin: 'newrelic'
apply plugin: 'embrace-swazzler'

apply from: "$rootDir/buildconfig/aar/local-aar.gradle"
apply from: '../tools/dynamic_feature_inclusion.gradle'
apply plugin: 'kotlin-parcelize'

def allowDistribution() {
    if (project.hasProperty('tkpdBuildType') && tkpdBuildType == "hockeyapp") {
        return "true";
    }
    return "false";
}

def getTkpdVersionCode() {
    return project.hasProperty('versionCode') ? Integer.parseInt(versionCode) : project.defaultVersionCode;
}

def getTkpdVersionName() {
    return project.hasProperty('versionName') ? versionName : project.defaultVersionName;
}

def devMode() {
    return !project.hasProperty('tkpdBuildType')
}

buildscript {
    repositories {
        mavenCentral()
        google()
        maven { url 'https://maven-hansel.tokopedia.com/maven' }
    }
    dependencies {
        classpath rootProject.ext.gradlePlugin.crashlytics
        classpath rootProject.ext.miscDependencies.hansel
        classpath rootProject.ext.miscDependencies.embraceSwazzler
        classpath rootProject.ext.gradlePlugin.googleServices
    }
}

android {

    project.ext {
        defaultVersionCode = 220412500;
        defaultVersionName = "2.125-test";
    }

    packagingOptions {
        exclude 'META-INF/**'
        exclude "**/module-info.class"
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    useLibrary 'org.apache.http.legacy'
    sourceSets {

        main {
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['assets', 'src/main/assets', 'src/main/assets/']
        }

        androidTest.setRoot('tests')
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lintOptions {
        checkDependencies false
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
    }


    buildTypes {
        debug {
            defaultConfig.minSdkVersion project.property("minSdkVersionDebug")
            signingConfig signingConfigs.debug
            minifyEnabled false
            zipAlignEnabled false
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            proguardFiles 'proguard-rules.txt'
            ext.enableHansel = project.hasProperty('hanselEnableDebug')
        }
        release {
            if (devMode()) {
                signingConfig signingConfigs.debug
            }
            debuggable = rootProject.hasProperty('enableDebug') && rootProject.property("enableDebug") == "true"
            ext.enableHansel = !project.hasProperty('hanselDisableRelease')
            minifyEnabled true
            zipAlignEnabled true
//            shrinkResources true
            buildConfigField "boolean", "ENABLE_DISTRIBUTION", allowDistribution()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            multiDexKeepProguard file('multidex-config.pro')
            ext.betaDistributionReleaseNotesFilePath = 'release_notes.txt'
            ext.betaDistributionGroupAliasesFilePath = 'group_beta.txt'
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled = true
        applicationId "com.tokopedia.sellerapp"
        versionCode getTkpdVersionCode()
        versionName getTkpdVersionName()
        resConfigs "en", "id"
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    buildFeatures {
        buildConfig true
    }

    dexOptions {
        javaMaxHeapSize "8g"
        keepRuntimeAnnotatedClasses false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    configurations.all {
        resolutionStrategy.force 'androidx.multidex:multidex:2.0.0'
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
        resolutionStrategy.force 'com.squareup.okio:okio:2.6.0'
    }

    // Specifies 4 flavor dimensions.
    flavorDimensions "tier", "client"

    productFlavors {
        staging {
            dimension "tier"
        }
        live {
            dimension "tier"
        }
        dev {
            dimension "client"
        }
        prod {
            dimension "client"
        }
    }
    // put Dynamic Feature Modules in dynamic-feature-sellerapp.cfg
    // to disable dynamic feature, use command option -Pdisable-dynamic-feature
    dynamicFeatures = getDynamicFeatureIfEnabled(project)
    generateAssetFile(project, dynamicFeatures)
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation platform(rootProject.ext.firebase.bom)
    implementation platform(rootProject.ext.networkDependencies.okhttpBom)

    implementation projectOrAar(rootProject.ext.features.liveBroadcaster)

    implementation projectOrAar(rootProject.ext.features.pushNotificationCommon)
    implementation projectOrAar(rootProject.ext.libraries.pushNotification)
    implementation projectOrAar(rootProject.ext.libraries.cmPushNotifications)
    implementation projectOrAar(rootProject.ext.libraries.encryption)

    implementation projectOrAar(rootProject.ext.libraries.applink)
    implementation projectOrAar(rootProject.ext.libraries.tkpdabstraction)
    implementation projectOrAar(rootProject.ext.libraries.baseList)
    implementation projectOrAar(rootProject.ext.libraries.webview)
    implementation projectOrAar(rootProject.ext.libraries.datePickerRange)
    implementation projectOrAar(rootProject.ext.libraries.remoteConfig)
    implementation projectOrAar(rootProject.ext.libraries.baseListSeller)
    implementation projectOrAar(rootProject.ext.libraries.kotlinExtensions)
    implementation projectOrAar(rootProject.ext.libraries.core_legacy)
    implementation projectOrAar(rootProject.ext.libraries.trackingOptimizer)
    implementation projectOrAar(rootProject.ext.libraries.coreNetwork)
    implementation projectOrAar(rootProject.ext.libraries.commonNetwork)
    implementation projectOrAar(rootProject.ext.libraries.iris)
    implementation projectOrAar(rootProject.ext.libraries.irisSession)
    implementation projectOrAar(rootProject.ext.libraries.dynamicFeatures)
    implementation projectOrAar(rootProject.ext.libraries.track)
    implementation projectOrAar(rootProject.ext.libraries.deviceInfo)
    implementation projectOrAar(rootProject.ext.libraries.deviceFingerprint)
    implementation projectOrAar(rootProject.ext.libraries.utils)
    implementation projectOrAar(rootProject.ext.libraries.screenshot_observer)
    if (rootProject.ext.debugToolsEnabled) {
        implementation projectOrAar(rootProject.ext.features.developerOptions)
    } else {
        implementation projectOrAar(rootProject.ext.features.developerOptionsNoop)
    }
    implementation projectOrAar(rootProject.ext.libraries.youtubeutil)
    implementation projectOrAar(rootProject.ext.features.appCommon)
    implementation projectOrAar(rootProject.ext.features.sellerorder)
    implementation projectOrAar(rootProject.ext.features.sellerAppWidget)
    implementation projectOrAar(rootProject.ext.features.sellerHome)
    implementation projectOrAar(rootProject.ext.features.goldMerchantCommon)
    implementation projectOrAar(rootProject.ext.features.topAdsDashboard)
    implementation projectOrAar(rootProject.ext.features.topAdsManagementCommon)
    implementation projectOrAar(rootProject.ext.features.report)
    implementation projectOrAar(rootProject.ext.features.topAdsAutoAds)
    implementation projectOrAar(rootProject.ext.features.topAdsCreate)
    implementation projectOrAar(rootProject.ext.features.topAdsEdit)
    implementation projectOrAar(rootProject.ext.features.topAdsHeadline)
    implementation projectOrAar(rootProject.ext.features.reputationCommon)
    implementation projectOrAar(rootProject.ext.features.sellerActiveCommon)
    implementation projectOrAar(rootProject.ext.features.topAdsSdk)
    implementation projectOrAar(rootProject.ext.features.payment)
    implementation projectOrAar(rootProject.ext.features.commonPayment)
    implementation projectOrAar(rootProject.ext.features.contactUs)
    implementation projectOrAar(rootProject.ext.features.otp)
    implementation projectOrAar(rootProject.ext.features.logout)
    implementation projectOrAar(rootProject.ext.features.saldodetails)
    implementation projectOrAar(rootProject.ext.features.pdpPaylaterWidget)
    implementation projectOrAar(rootProject.ext.features.homecredit)
    implementation projectOrAar(rootProject.ext.libraries.imageuploader)
    implementation projectOrAar(rootProject.ext.libraries.imagePickerCommon)
    implementation projectOrAar(rootProject.ext.libraries.linker)
    implementation projectOrAar(rootProject.ext.libraries.weaver)
    implementation projectOrAar(rootProject.ext.libraries.interceptors)
    implementation projectOrAar(rootProject.ext.features.logisticaddaddress)
    implementation projectOrAar(rootProject.ext.features.logisticCommon)
    implementation projectOrAar(rootProject.ext.features.logisticorder)
    implementation projectOrAar(rootProject.ext.features.logisticseller)
    implementation projectOrAar(rootProject.ext.features.editshipping)
    implementation projectOrAar(rootProject.ext.features.topchat)
    implementation projectOrAar(rootProject.ext.features.chatbot)
    implementation projectOrAar(rootProject.ext.features.chatcommon)
    implementation projectOrAar(rootProject.ext.features.attachproduct)
    implementation projectOrAar(rootProject.ext.features.talk)
    implementation projectOrAar(rootProject.ext.features.productManageList)
    implementation projectOrAar(rootProject.ext.features.productManageCommon)
    implementation projectOrAar(rootProject.ext.features.kolCommon)
    implementation projectOrAar(rootProject.ext.features.merchantVoucher)
    implementation projectOrAar(rootProject.ext.features.categoryCommon)
    implementation projectOrAar(rootProject.ext.features.youtubeCommon)
    implementation projectOrAar(rootProject.ext.features.notifCenter)
    implementation projectOrAar(rootProject.ext.features.settingbank)
    implementation projectOrAar(rootProject.ext.features.managepassword)
    implementation projectOrAar(rootProject.ext.features.shopCommon)
    implementation projectOrAar(rootProject.ext.features.shopOpen)
    implementation projectOrAar(rootProject.ext.features.withdraw)
    implementation projectOrAar(rootProject.ext.features.medialoader)
    implementation projectOrAar(rootProject.ext.features.mediapickerCommon)
    implementation projectOrAar(rootProject.ext.features.sellerMigrationCommon)
    implementation projectOrAar(rootProject.ext.features.topAdsOnBoarding)

    implementation projectOrAar(rootProject.ext.features.changePhoneNumber)
    implementation projectOrAar(rootProject.ext.features.loginregister)
    implementation projectOrAar(rootProject.ext.features.chooseaccount)
    implementation projectOrAar(rootProject.ext.features.sessioncommon)
    implementation projectOrAar(rootProject.ext.features.fcm_common)
    implementation projectOrAar(rootProject.ext.features.profileCompletion)
    implementation projectOrAar(rootProject.ext.features.agerestriction)

    implementation projectOrAar(rootProject.ext.features.attachinvoice)
    implementation projectOrAar(rootProject.ext.features.attachvoucher)

    implementation projectOrAar(rootProject.ext.features.playCommon)
    implementation projectOrAar(rootProject.ext.features.filter)

    implementation projectOrAar(rootProject.ext.features.additional_check)
    implementation projectOrAar(rootProject.ext.features.reviewCommon)
    implementation projectOrAar(rootProject.ext.features.campaignCommon)

    implementation rootProject.ext.unifyDependencies.icon
    implementation rootProject.ext.unifyDependencies.components
    implementation rootProject.ext.unifyDependencies.icons
    implementation rootProject.ext.unifyDependencies.principles
    implementation rootProject.ext.tkpdLibDependencies.youtubePlayer
    implementation rootProject.ext.tkpdInternalLibDependencies.akamaiBMP
    implementation projectOrAar(rootProject.ext.libraries.akamaiBotLib)

    implementation rootProject.ext.tkpdInternalLibDependencies.cachemanager
    implementation rootProject.ext.tkpdInternalLibDependencies.globalconfig
    implementation projectOrAar(rootProject.ext.libraries.graphql)
    implementation projectOrAar(rootProject.ext.libraries.network)
    implementation projectOrAar(rootProject.ext.libraries.tokopatch)
    implementation rootProject.ext.tkpdInternalLibDependencies.url
    implementation rootProject.ext.tkpdInternalLibDependencies.usecase
    implementation projectOrAar(rootProject.ext.libraries.usersession)
    implementation rootProject.ext.tkpdInternalLibDependencies.betaNotif
    implementation rootProject.ext.miscDependencies.newRelic
    // Embrace
    implementation rootProject.ext.miscDependencies.embraceSdk

    implementation projectOrAar(rootProject.ext.libraries.remoteResourceRequest)
    implementation rootProject.ext.debugToolsDependencies.chuck

    implementation(rootProject.ext.debugToolsDependencies.timber) {
        exclude group: 'org.jetbrains', module: 'annotations'
    }

    implementation projectOrAar(rootProject.ext.libraries.analytics)
    if (rootProject.ext.debugToolsEnabled) {
        implementation projectOrAar(rootProject.ext.libraries.analyticsDebugger)
        implementation rootProject.ext.tkpdInternalLibDependencies.cassava
    } else {
        implementation projectOrAar(rootProject.ext.libraries.analyticsDebuggerNoop)
        implementation rootProject.ext.tkpdInternalLibDependencies.cassavaNoOp
    }

    implementation projectOrAar(rootProject.ext.libraries.pageInfoPusher)
    implementation projectOrAar(rootProject.ext.libraries.logger)

    if (rootProject.ext.debugToolsEnabled) {
        implementation projectOrAar(rootProject.ext.libraries.preReleaseInspector)
    } else {
        implementation projectOrAar(rootProject.ext.libraries.preReleaseInspectorNoop)
    }

    if (rootProject.ext.debugToolsEnabled) {
        implementation projectOrAar(rootProject.ext.libraries.journeyDebugger)
    } else {
        implementation projectOrAar(rootProject.ext.libraries.journeyDebuggerNoop)
    }

    if (rootProject.ext.debugToolsEnabled) {
        implementation rootProject.ext.tkpdInternalLibDependencies.fakeresponse
    } else {
        implementation rootProject.ext.tkpdInternalLibDependencies.fakeresponseNoOp
    }

    implementation rootProject.ext.gotoOneKyc.resource

    implementation rootProject.ext.playServicesDependencies.analytics
    implementation rootProject.ext.playServicesDependencies.core
    implementation rootProject.ext.playServicesDependencies.maps

    implementation rootProject.ext.firebase.config
    implementation rootProject.ext.firebase.messaging
    implementation rootProject.ext.firebase.crashlytics

    implementation rootProject.ext.supportLibDependencies.cardViewV7
    implementation rootProject.ext.supportLibDependencies.appCompactV7
    implementation rootProject.ext.supportLibDependencies.design
    implementation rootProject.ext.supportLibDependencies.constraintLayout
    implementation rootProject.ext.supportLibDependencies.kotlinSupport

    implementation rootProject.ext.networkDependencies.retrofit
    implementation rootProject.ext.networkDependencies.converterGson
    implementation rootProject.ext.networkDependencies.adapterRxJava
    implementation rootProject.ext.networkDependencies.okHttp
    implementation rootProject.ext.networkDependencies.loggingInterceptor

    implementation rootProject.ext.miscDependencies.lifecycleProcess
    implementation rootProject.ext.miscDependencies.lifeCycleExtentions
    implementation rootProject.ext.miscDependencies.roundCornerProgressBar
    implementation rootProject.ext.miscDependencies.scannerZxing
    implementation rootProject.ext.miscDependencies.multiDex
    implementation rootProject.ext.miscDependencies.gson
    implementation rootProject.ext.miscDependencies.autopatchbase
    implementation projectOrAar(rootProject.ext.libraries.keys)
    implementation projectOrAar(rootProject.ext.libraries.devMonitoringTools)

    implementation rootProject.ext.miscDependencies.rxAndroid
    implementation rootProject.ext.miscDependencies.rxJava

    implementation rootProject.ext.miscDependencies.workManager
    implementation rootProject.ext.miscDependencies.startupRuntime

    implementation projectOrAar(rootProject.ext.libraries.fingerprint)
    implementation projectOrAar(rootProject.ext.libraries.logger)
    implementation projectOrAar(rootProject.ext.libraries.universal_sharing)

    implementation rootProject.ext.supportLibDependencies.exifinterface
    compileOnly rootProject.ext.miscDependencies.javaxAnnotation
    implementation rootProject.ext.miscDependencies.dagger
    annotationProcessor rootProject.ext.miscDependencies.daggerCompiler

    implementation(rootProject.ext.tkpdLibDependencies.expandableOption) {
        exclude group: "com.android.support"
    }

    implementation(rootProject.ext.tkpdLibDependencies.showcase) {
        exclude group: "com.android.support"
    }


    implementation('de.hdodenhof:circleimageview:2.1.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    debugImplementation project.ext.debugToolsDependencies.leakCanary

    androidTestImplementation(rootProject.ext.testDependencies.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation rootProject.ext.testDependencies.junit

    implementation rootProject.ext.playServicesDependencies.tagManager
    implementation rootProject.ext.playServicesDependencies.tagManagerImpl

    //Adding this to df_base_sellerapp/build.gradle was giving error - https://github.com/Meituan-Dianping/Robust/issues/444
    implementation projectOrAar(rootProject.ext.libraries.imagePickerInsta)

    androidTestImplementation rootProject.ext.testDependencies.fragmentTest

    androidTestImplementation projectOrAar(rootProject.ext.features.contentTest)
    implementation project(rootProject.ext.features.watch)
}

apply plugin: 'com.google.gms.google-services'
