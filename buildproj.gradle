Properties properties = new Properties()
if (rootProject.file("local.properties").exists()) {
    properties.load(rootProject.file("local.properties").newDataInputStream())
}

allprojects {
    project.apply from: rootProject.file('buildconfig/dependencies/dependencies.gradle')
    // https://github.com/robolectric/robolectric-gradle-plugin/issues/144
    tasks.withType(Test).configureEach {
        jvmArgs(["--add-opens=java.base/java.lang=ALL-UNNAMED",
                 "--add-opens=java.base/java.util=ALL-UNNAMED",
                 "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED"])
    }
    tasks.withType(Test) { jvmArgs += "-noverify" }
    repositories {
        maven {
            url = "$rootDir/localMavenRepository"
        }
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url "${gcp_artifactory_url}" + "/libs-release-local";
            credentials {
                username = "${gcp_artifactory_username}"
                password = "${gcp_artifactory_password}"
            }
            allowInsecureProtocol = true
        }
        maven {
            url "${artifactory_url}" + "/libs-release-local";
            credentials {
                username = "${artifactory_username}"
                password = "${artifactory_password}"
            }
            allowInsecureProtocol = true
        }
        maven {
            url "${gcp_artifactory_url}" + "/libs-shared";
            credentials {
                username = "${gcp_artifactory_username}"
                password = "${gcp_artifactory_password}"
            }
            allowInsecureProtocol = true
        }
        maven {
            name = "courier-client"
            url = uri("https://maven.pkg.github.com/Tokopedia-GoTo/android-courier-connection")

            credentials {
                username = properties.getProperty("gpr.usr") ?: System.getenv("GPR_USER")
                password = properties.getProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
        maven {
            url = uri("https://maven.pkg.github.com/Tokopedia-GoTo/GoTo-Android-Lib")

            credentials {
                username = properties.getProperty("gpr.usr") ?: System.getenv("GPR_USER")
                password = properties.getProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
        maven {
            url = uri("https://maven.pkg.github.com/carousell/lk6-tkpd-android-sdk")
            credentials {
                username = properties.getProperty("laku.usr") ?: System.getenv("LAKU_USR")
                password = properties.getProperty("laku.key") ?: System.getenv("LAKU_API_KEY")
            }
            content {
                includeGroupByRegex("com\\.github\\.carousell.*")
            }
        }
        maven {
            url "https://jitpack.io"
            credentials { username authToken }
        }
        flatDir {
            dirs rootProject.file('aars')
        }
        maven { url 'https://maven-hansel.tokopedia.com/maven' }
        maven {url 'https://developer.huawei.com/repo/'}
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    artifactoryUrl = "${artifactory_url}"
}

afterEvaluate {
    tasks.withType(PublishToMavenRepository).all { publishTask ->
        publishTask.onlyIf { task ->
            if (project.plugins.hasPlugin('com.android.application')) {
                task.enabled = false
                task.group = null
                return false
            }
            return true
        }
    }
}

task("runJacoco")
task("runUnitTest")
task("runLintReport")
task("runLintPr")

def lintPrTaskFile = rootProject.file("tasks.txt")

subprojects {
    tasks.withType(Test) {
        if (project.hasProperty("SPEK_TIMEOUT")) {
            systemProperty "SPEK_TIMEOUT", project.getProperty("SPEK_TIMEOUT")
            maxParallelForks = Runtime.runtime.availableProcessors()
        }
    }
    project.configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                force "androidx.appcompat:appcompat:${supportLibraryVersion}"
                force("org.objenesis:objenesis:2.6")
                force("net.bytebuddy:byte-buddy:1.12.20")
                substitute module('androidx.appcompat:appcompat-resources') using module(rootProject.ext.supportLibDependencies.appCompactResource)
                substitute module('org.jetbrains.kotlin:kotlin-stdlib') using module(rootProject.ext.supportLibDependencies.kotlinSupport)
                substitute module('org.jetbrains.kotlin:kotlin-stdlib-common') using module("org.jetbrains.kotlin:kotlin-stdlib-common:${kotlinVersion}")
                substitute module('com.squareup.okio:okio') using module('com.squareup.okio:okio:3.4.0')
                substitute module('com.google.code.findbugs:jsr305') using module('com.google.code.findbugs:jsr305:1.3.9')
                substitute module('androidx.annotation:annotation') using module("androidx.annotation:annotation:${supportLibraryVersion}")
                substitute module('androidx.multidex:multidex') using module("androidx.multidex:multidex:${multiDexVersion}")
                substitute module('androidx.legacy:legacy-support-v13') using module("androidx.legacy:legacy-support-v13:${supportLegacyLibraryVersion}")
                substitute module('androidx.legacy:legacy-support-v4') using module("androidx.legacy:legacy-support-v4:${supportLegacyLibraryVersion}")
                substitute module('androidx.arch.core:core-runtime') using module("androidx.arch.core:core-runtime:${archCoreVersion}")
                substitute module('androidx.arch.core:core-common') using module("androidx.arch.core:core-common:${archCoreVersion}")
                if (project.name != 'wearosapp') {
                    substitute module('androidx.cardview:cardview') using module("androidx.cardview:cardview:${supportLegacyLibraryVersion}")
                }

                substitute module('androidx.fragment:fragment') using module("androidx.fragment:fragment:${androidxFragment}")
                substitute module('com.google.android.material:material') using module("com.google.android.material:material:${materialVersion}")
                substitute module('androidx.constraintlayout:constraintlayout') using module("androidx.constraintlayout:constraintlayout:${constraintLayoutVersion}")
                substitute module('org.apache.commons:commons-lang3') using module('org.apache.commons:commons-lang3:3.5')
                substitute module('com.google.android.gms:play-services-base') using module("com.google.android.gms:play-services-base:${playServiceBaseVersion}")
                substitute module('com.google.android.gms:play-services-measurement-base') using module("com.google.android.gms:play-services-measurement-base:${playServiceMeasurementBase}")
                substitute module('com.google.android.gms:play-services-base') using module("com.google.android.gms:play-services-base:${playServiceBase}")
                substitute module('com.google.firebase:firebase-config') using module("com.google.firebase:firebase-config:${firebaseRemoteConfigVersion}")
                substitute module('com.google.firebase:firebase-config-ktx') using module("com.google.firebase:firebase-config-ktx:${firebaseRemoteConfigVersion}")
                substitute module('com.google.firebase:firebase-perf-ktx') using module("com.google.firebase:firebase-perf-ktx:${firebasePerfVersion}")
                substitute module('androidx.media:media') using module("androidx.media:media:1.3.0")
                substitute module('org.jetbrains.kotlin:kotlin-reflect') using module("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
                substitute module('androidx.sqlite:sqlite-framework') using module("androidx.sqlite:sqlite-framework:${sqliteFrameworkVersion}")
                substitute module('com.google.android.gms:play-services-ads-identifier') using module("com.google.android.gms:play-services-ads-identifier:${playServiceAds}")
                substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk7') using module("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlinVersion}")
                substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk8') using module("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
                substitute module('com.google.code.gson:gson') using module("com.google.code.gson:gson:$gsonDebugVersion")
                substitute module("androidx.room:room-runtime") using module("androidx.room:room-runtime:$roomVersion")
                substitute module("androidx.room:room-compiler") using module("androidx.room:room-compiler:$roomVersion")
//                substitute module("com.google.android.apps.common.testing.accessibility.framework:accessibility-test-framework") using module("com.google.android.apps.common.testing.accessibility.framework:accessibility-test-framework:${accessibilityTestFrameworkVersion}")

                substitute module("com.tokopedia.nest:principles") using module("com.tokopedia.nest:principles:$nestPrinciplesVersion")
                substitute module("com.airbnb.android:lottie") using module("com.airbnb.android:lottie:$lottieVersion")

                if (!rootProject.ext.debugToolsEnabled) {
                    substitute module(rootProject.ext.debugToolsDependencies.chuck) using module(rootProject.ext.debugToolsDependencies.chuckNoop)
                    substitute module(rootProject.ext.tkpdInternalLibDependencies.fakeresponse) using module(rootProject.ext.tkpdInternalLibDependencies.fakeresponseNoOp)
                }
            }
        }
    }
    project.afterEvaluate {
        def isLibrary = project.plugins.hasPlugin("com.android.library")
        def isApp = project.plugins.hasPlugin("com.android.application")
        def isDF = project.plugins.hasPlugin("com.android.dynamic-feature")
        if (project.tasks.findByName("jacocoTestReport")!= null) {
            def task = project.path + ":jacocoTestReport"
            rootProject.tasks.runJacoco.dependsOn(task)
            if (isApp) {
                task = project.path + ":testLiveProdDebugUnitTest"
                rootProject.tasks.runUnitTest.dependsOn(task)
            } else if (isLibrary && !isDF ){
                task = project.path + ":testDebugUnitTest"
                rootProject.tasks.runUnitTest.dependsOn(task)
                if (project.name == "applink") {
                    android.libraryVariants.all { variant ->
                        tasks.getByName("test${variant.name.capitalize()}UnitTest") {
                            dependsOn(rootProject.path + ":readDf")
                        }
                    }
                }
            }
        }
        if (project.tasks.findByName("lint")!= null) {
            def lintTask = null
            if (isApp) {
                lintTask = project.path + ":lintLiveDevDebug"
            } else if (isLibrary && !isDF ){
                lintTask = project.path + ":lintDebug"
            }
            if (lintTask != null) {
                rootProject.tasks.runLintReport.dependsOn(lintTask)
            }
            if (lintPrTaskFile.exists() && lintPrTaskFile.readLines().contains(lintTask)) {
                rootProject.tasks.runLintPr.dependsOn(lintTask)
            }
        }
        try {
            if (isLibrary) {
                project.apply from: "$rootDir/buildconfig/aar/publish.gradle"
            }
        }catch(Exception ignored) {

        }
    }
}
