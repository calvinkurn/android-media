allprojects {
    project.apply from: rootProject.file('buildconfig/dependencies/dependencies.gradle')
    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven { url "https://maven.google.com" }
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://dl.bintray.com/guardian/android' }
        maven { url 'https://mymavenrepo.com/repo/e01iL1W9Gdxw73PGI9LA' }
        maven {
            url "${artifactory_url}" + "/libs-release-local";
            credentials {
                username = "${artifactory_username}"
                password = "${artifactory_password}"
            }
        }
        maven {
            url "https://jitpack.io"
            credentials { username authToken }
        }
        maven { url "https://www.jitpack.io" }
        maven { url "$rootDir/node_modules/react-native/android" }
        flatDir {
            dirs '../aars'
        }
        maven { url 'https://hansel.io/maven' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    artifactoryUrl = "${artifactory_url}"
}

afterEvaluate {
    tasks.withType(PublishToMavenRepository).all { publishTask ->
        publishTask.onlyIf { task ->
            if (project.plugins.hasPlugin('com.android.application')) {
                task.enabled = false
                task.group = null
                return false
            }
            return true
        }
    }
}

subprojects {
    project.configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('com.squareup.okhttp3:okhttp') with module(rootProject.ext.networkDependencies.okHttp)
                substitute module('org.jetbrains.kotlin:kotlin-stdlib') with module(rootProject.ext.supportLibDependencies.kotlinSupport)
                substitute module('org.jetbrains.kotlin:kotlin-stdlib-common') with module('org.jetbrains.kotlin:kotlin-stdlib-common:1.3.50')
                substitute module('com.squareup.okio:okio') with module('com.squareup.okio:okio:2.2.2')
                substitute module('com.google.code.findbugs:jsr305') with module('com.google.code.findbugs:jsr305:1.3.9')
                substitute module('androidx.annotation:annotation') with module("androidx.annotation:annotation:${supportLibraryVersion}")
                substitute module('androidx.multidex:multidex') with module("androidx.multidex:multidex:${multiDexVersion}")
                substitute module('androidx.legacy:legacy-support-v13') with module("androidx.legacy:legacy-support-v13:${supportLibraryVersion}")
                substitute module('androidx.legacy:legacy-support-v4') with module("androidx.legacy:legacy-support-v4:${supportLibraryVersion}")
                substitute module('androidx.core:core') with module("androidx.core:core:${supportLibraryVersion}")
                substitute module('androidx.arch.core:core-runtime') with module("androidx.arch.core:core-runtime:${lifeCycleVersion}")
                substitute module('androidx.arch.core:core-common') with module("androidx.arch.core:core-common:${lifeCycleVersion}")
                substitute module('androidx.lifecycle:lifecycle-runtime') with module("androidx.lifecycle:lifecycle-runtime:${lifeCycleVersion}")
                substitute module('androidx.lifecycle:lifecycle-viewmodel') with module("androidx.lifecycle:lifecycle-viewmodel:${lifeCycleVersion}")
                substitute module('androidx.lifecycle:lifecycle-livedata-core') with module("androidx.lifecycle:lifecycle-livedata-core:${lifeCycleVersion}")
                substitute module('org.apache.commons:commons-lang3') with module('org.apache.commons:commons-lang3:3.5')
                substitute module('com.google.android.gms:play-services-base') with module("com.google.android.gms:play-services-base:${playServiceBaseVersion}")
                substitute module('com.google.firebase:firebase-config') with module("com.google.firebase:firebase-config:${playServiceFirebaseConfig}")
                substitute module('com.google.android.gms:play-services-base') with module("com.google.android.gms:play-services-base:${playServiceBaseVersion}")
                substitute module('com.google.firebase:firebase-iid') with module("com.google.firebase:firebase-iid:${playServiceFirebaseIidVersion}")
                substitute module('com.google.android.gms:play-services-measurement-base') with module("com.google.android.gms:play-services-measurement-base:16.0.5")
                substitute module('com.google.guava:guava') with module("com.google.guava:guava:${guavaVersion}")
                substitute module('com.facebook.soloader:soloader') with module("com.facebook.soloader:soloader:0.8.0")
            }
        }
    }
}

gradle.buildFinished {
    "zip -d .okbuck/cache/org.hamcrest.hamcrest-core-1.3.jar LICENSE.txt".execute()
    "zip -d .okbuck/cache/org.hamcrest.hamcrest-library-1.3.jar LICENSE.txt".execute()
    "zip -d .okbuck/cache/org.hamcrest.hamcrest-integration-1.3.jar LICENSE.txt".execute()
}