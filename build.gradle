// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'buildconfig/dependencies/dependencies.gradle'
apply from: 'buildconfig/dependencies/dependency-libraries.gradle'
apply from: 'buildconfig/dependencies/dependency-features.gradle'
apply from: 'tools/quality.gradle'
apply from: 'tools/composite_build.gradle'
apply from: "buildconfig/aar/local-aar-config.gradle"
apply from: "buildconfig/aar/local-aar.gradle"

buildscript {
    apply from: 'buildconfig/dependencies/dependencies.gradle'

    repositories {
        maven {
            url = "$rootDir/localMavenRepository"
        }
        gradlePluginPortal()
        google()
        maven { url "https://maven.google.com" }
        jcenter()
        mavenLocal()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'http://central.maven.org/maven2/' }
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven {
            url "${artifactory_url}" + "/libs-release-local";
            credentials {
                username = "${artifactory_username}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        classpath ('com.android.tools.build:gradle:4.2.1') {
            exclude module: 'proguard-gradle'
        }
        classpath "org.jacoco:org.jacoco.core:$jacocoVersion"
        classpath('net.sf.proguard:proguard-gradle:6.0') {
            force = true
        }
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:4.18.2") {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        }
        classpath 'com.google.firebase:perf-plugin:1.3.1'
        classpath "com.google.gms:google-services:4.3.3"
        classpath rootProject.ext.gradlePlugin.crashlytics
        classpath "com.vanniktech:gradle-code-quality-tools-plugin:0.17.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.tokopedia.patch:gradle-plugin:0.0.1'
        classpath 'com.tokopedia.patch:auto-patch-plugin:0.0.1'
        classpath 'com.tokopedia.patch:autopatchbase:0.0.1'
        classpath 'org.javassist:javassist:3.20.0-GA'
        classpath "androidx.benchmark:benchmark-gradle-plugin:1.0.0"
        classpath "android.arch.navigation:navigation-safe-args-gradle-plugin:1.0.0"
        classpath "com.newrelic.agent.android:agent-gradle-plugin:$newRelicVersion"
        classpath "com.gradle:gradle-enterprise-gradle-plugin:3.6.3"
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

apply from: 'buildproj.gradle'

apply from: "$rootDir/tools/set_debug_tools.gradle"

subprojects {
    project.afterEvaluate {
        def isLibrary = project.plugins.hasPlugin("com.android.library")
        if (isLibrary) {
            project.apply from: "$rootDir/buildconfig/aar/publish.gradle"
        }
    }
}

//Installing Git Hooks
task installGitHooks {
    doLast {
        ("cp " + rootProject.rootDir + "/git_hooks/pre-commit " + rootProject.rootDir + "/.git/hooks/pre-commit").execute()
        Runtime.getRuntime().exec("chmod -R +x .git/hooks/")
    }
}
clean.dependsOn installGitHooks

