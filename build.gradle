import org.jetbrains.dokka.gradle.DokkaMultiModuleTask
import org.jetbrains.dokka.gradle.DokkaTaskPartial

// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'buildconfig/dependencies/dependencies.gradle'
apply from: 'buildconfig/dependencies/dependency-libraries.gradle'
apply from: 'buildconfig/dependencies/dependency-features.gradle'
apply from: 'tools/quality.gradle'
apply from: 'tools/composite_build.gradle'
apply from: "buildconfig/aar/local-aar-config.gradle"
apply from: "buildconfig/aar/local-aar.gradle"

buildscript {
    apply from: 'buildconfig/dependencies/dependencies.gradle'

    repositories {
        maven {
            url = "$rootDir/localMavenRepository"
        }
        google()
        gradlePluginPortal()
        mavenLocal()
        mavenCentral()
        maven {
            url "${gcp_artifactory_url}" + "/libs-release-local"
            credentials {
                username = "${gcp_artifactory_username}"
                password = "${gcp_artifactory_password}"
            }
            allowInsecureProtocol = true
        }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath ('com.android.tools.build:gradle:7.4.2') {
            exclude module: 'proguard-gradle'
        }
        classpath "org.jacoco:org.jacoco.core:$jacocoVersion"
        classpath('net.sf.proguard:proguard-gradle:6.0.3') {
            force = true
        }
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:4.28.4") {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        }
        classpath 'com.google.firebase:perf-plugin:1.4.2'
        classpath 'com.google.gms:google-services:4.3.15'
        classpath rootProject.ext.gradlePlugin.crashlytics
        classpath "com.vanniktech:gradle-code-quality-tools-plugin:0.17.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'org.javassist:javassist:3.20.0-GA'
        classpath "androidx.benchmark:benchmark-gradle-plugin:1.1.1"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.5.3"
        classpath "com.newrelic.agent.android:agent-gradle-plugin:$newRelicVersion"
        classpath "com.gradle:gradle-enterprise-gradle-plugin:3.6.3"
        classpath "gradle.plugin.org.gradle.android:android-cache-fix-gradle-plugin:2.4.4"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.7.20"
        classpath "org.jetbrains.dokka:dokka-core:1.7.20"
        classpath "com.tokopedia.plugin:codebasereader:0.0.1"
        classpath rootProject.ext.gradlePlugin.composeCompilerReportGenerator
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

apply from: 'buildproj.gradle'
apply from: "$rootDir/tools/set_debug_tools.gradle"

//Installing Git Hooks
task installGitHooks {
    doLast {
        ("cp " + rootProject.rootDir + "/git_hooks/pre-commit " + rootProject.rootDir + "/.git/hooks/pre-commit").execute()
        Runtime.getRuntime().exec("chmod -R +x .git/hooks/")
    }
}
clean.dependsOn installGitHooks

// --- Dokka ---

apply plugin: "org.jetbrains.dokka"

// --- Codebase reader ---
// to read df module in applink unit test
apply plugin: 'com.tokopedia.codebasereader'

/**
 * Override the default value of Dokka styles.
 *
 * BaseConfiguration to generate a dokka properties to able to override through [pluginsMapConfiguration],
 * it used for a multiModuleTask and dokkaPartialTask.
 *
 * @return String
 */
String generateBaseConfiguration() {
    String footer = new File("$rootDir/docs/internal/footer.txt")
            .readLines()
            .join(" ")
            .trim()
            .toString()

    return """
        {
            "customStyleSheets": ["${file("$rootDir/docs/internal/css/logo-styles.css")}"],
            "templatesDir": "${file("$rootDir/docs/internal/templates")}",
            "separateInheritedMembers": true,
            "footerMessage": "$footer"
        }
    """
}

// root module
tasks.withType(DokkaMultiModuleTask).configureEach {
    failOnWarning.set(true)
    outputDirectory.set(rootProject.file('docs'))
    pluginsMapConfiguration.set(
            ["org.jetbrains.dokka.base.DokkaBase": generateBaseConfiguration()]
    )
}

// root module
tasks.withType(DokkaMultiModuleTask) {
    // Append the default main.css with a custom style.css
    // The style.css contains a custom css style for Tokopedia footer message
    doLast {
        project.file("$rootDir/docs/styles/main.css").append(
                project.file("$rootDir/docs/internal/css/style.css").text
        )
    }
}

// sub module
subprojects {
    tasks.withType(DokkaTaskPartial.class) {
        pluginsMapConfiguration.set(
                ["org.jetbrains.dokka.base.DokkaBase": generateBaseConfiguration()]
        )

        dokkaSourceSets.configureEach {
            perPackageOption {
                matchingRegex.set(".*internal.*")
                suppress.set(true)
            }

            reportUndocumented.set(true)
            skipEmptyPackages.set(true)
            skipDeprecated.set(true)

            // Add Android SDK packages
            noAndroidSdkLink.set(false)

            // AndroidX + Kotlin docs
            externalDocumentationLink {
                url.set(new URL("https://developer.android.com/reference/"))
                packageListUrl.set(new URL("https://developer.android.com/reference/androidx/package-list"))
            }
            externalDocumentationLink {
                url.set(new URL("https://developer.android.com/reference/kotlin/"))
                packageListUrl.set(new URL("https://developer.android.com/reference/kotlin/androidx/package-list"))
            }
        }
    }
}
