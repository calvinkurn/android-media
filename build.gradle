// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'buildconfig/dependencies.gradle'

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.uber:okbuck:0.32.2'
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.1"
        classpath 'com.apollographql.apollo:gradle-plugin:0.3.0'
        classpath 'com.google.firebase:firebase-plugins:1.1.1'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'

    }
}

allprojects {
    project.apply from: rootProject.file('buildconfig/dependencies.gradle')
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url "https://www.jitpack.io" }
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://dl.bintray.com/guardian/android' }
        maven { url "https://maven.google.com" }
        maven { url 'https://mymavenrepo.com/repo/e01iL1W9Gdxw73PGI9LA'}
        maven {
            url "${artifactory_url}" + "/libs-release-local";
            credentials {
                username = "${artifactory_username}"
                password = "${artifactory_password}"
            }
        }
        maven { url "$rootDir/node_modules/react-native/android" }
        flatDir {
            dirs '../aars'
        }
        maven { url 'https://hansel.io/maven' }
    }
}

apply plugin: 'com.uber.okbuck'

okbuck {
    buildToolVersion = "25.0.0"
    target = "android-26"
    linearAllocHardLimit = [
            customerapp: 10130000,
            sellerapp: 10130000
    ]
    extraBuckOpts = [
            'customerappDebug': [
                    "android_binary": ["trim_resource_ids = True"]
            ],
            'sellerappDebug': [
                    "android_binary": ["trim_resource_ids = True"]
            ]
    ]

    intellij {
        sources = true
    }
    
    // Allows okbuck to espresso and robolectric buck rules.
    test {
        espresso = true
        robolectric = true
    }

    wrapper {
        repo = 'https://github.com/facebook/buck.git'
    }

}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

ext {
    artifactoryUrl = "${artifactory_url}"
}

afterEvaluate {
    tasks.withType(PublishToMavenRepository).all { publishTask ->
        publishTask.onlyIf { task ->
            if (project.plugins.hasPlugin('com.android.application')) {
                task.enabled = false
                task.group = null
                return false
            }
            return true
        }
    }
}

subprojects {
    project.configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('com.squareup.okhttp3:okhttp') with module(rootProject.ext.networkDependencies.okHttp)
                substitute module('com.squareup.okio:okio') with module('com.squareup.okio:okio:1.13.0')
                substitute module('com.google.code.findbugs:jsr305') with module('com.google.code.findbugs:jsr305:1.3.9')
                substitute module('com.android.support:support-annotations') with module('com.android.support:support-annotations:26.0.2')
                substitute module('com.android.support:multidex') with module('com.android.support:multidex:1.0.3')
            }
        }
    }

}

def addCommonConfigurationForAndroidModules(Project project) {
    project.android {
        compileSdkVersion rootProject.ext.compileSdkVersion
        buildToolsVersion rootProject.ext.buildToolsVersion

        defaultConfig {
            minSdkVersion rootProject.ext.minSdkVersion
            targetSdkVersion rootProject.ext.targetSdkVersion
            versionCode 1
            versionName "1.0"

        }
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
        }
    }

}

gradle.buildFinished {
    "zip -d .okbuck/cache/org.hamcrest.hamcrest-core-1.3.jar LICENSE.txt".execute()
    "zip -d .okbuck/cache/org.hamcrest.hamcrest-library-1.3.jar LICENSE.txt".execute()
    "zip -d .okbuck/cache/org.hamcrest.hamcrest-integration-1.3.jar LICENSE.txt".execute()
}
